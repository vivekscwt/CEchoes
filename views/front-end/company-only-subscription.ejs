<%- include('common/header') -%>
    <link href="/front-end/css/company-profile-dashboard.css" rel="stylesheet" type="text/css">
    <div class="container">
        <div class="formbold-form-wrapper">
            <form id="multiStepForm">
                <div class="formbold-steps">
                    <ul>
                        <li class="formbold-step-menu1 active"><span>1</span>Sign Up</li>
                        <li class="formbold-step-menu2"><span>2</span>Organization Details</li>
                        <li class="formbold-step-menu3"><span>3</span>Confirm</li>
                    </ul>
                </div>
                <div class="formbold-form-step-1 form-step active">
                    <div class="formbold-input-flex">
                        <div>
                            <label for="first_name" class="formbold-form-label">First name</label>
                            <input type="text" name="first_name" placeholder="Andrio" id="first_name"
                                class="formbold-form-input" value="<%= user.first_name %>" required />
                        </div>
                        <div>
                            <label for="last_name" class="formbold-form-label">Last name</label>
                            <input type="text" name="last_name" placeholder="Dolee" id="last_name"
                                class="formbold-form-input" value="<%= user.last_name %>" required />
                        </div>
                    </div>
                    <div class="formbold-input-flex">
                        <div>
                            <label for="dob" class="formbold-form-label">Date of Birth</label>
                            <input type="date" name="dob" id="dob" class="formbold-form-input" value="<% if(userMeta && userMeta.address){ %><%= userMeta.date_of_birth %><% } %>" required/>
                        </div>
                        <div>
                            <label for="email" class="formbold-form-label">Email Address</label>
                            <input type="email" name="email" placeholder="example@mail.com" id="email"
                                class="formbold-form-input" value="<%= user.email %>" required disabled />
                            <span id="emailError" style="color: red; display: none;">Invalid email address.</span>
                            <span id="emailAvailabilityError" style="display: none; color: red;">This email is already
                                registered. Please use a different email address.</span>
                        </div>
                    </div>
                    <div class="formbold-input">
                        <div>
                            <label for="phone" class="formbold-form-label">Phone</label>
                            <input type="number" name="phone" placeholder="9654354544" id="phone"
                                class="formbold-form-input" value="<%= user.phone %>" required />
                            <span id="phoneavailabilityerror" style="display: none; color: red;">This Phone is already
                                registered. Please use a different Phone number.</span>
                        </div>
                    </div>
                    <div class="formbold-input-flex">
                        <div>
                            <label for="user_country" class="formbold-form-label">Select a Country</label>
                            <select name="user_country" id="user_country" class="formbold-form-input" required>
                                <option value="">Select a country</option>
                                <% getCountries.forEach(country=> { %>
                                    <% if(userMeta && userMeta.country){ %>
                                    <option value="<%= country.id %>" <% if(country.id==userMeta.country){ %>selected <% } %>>
                                        <%= country.name %>
                                    </option>
                                    <% }else{ %>
                                        <option value="<%= country.id %>">
                                            <%= country.name %>
                                        </option>
                                    <% }%>
                                    <% }); %>
                            </select>
                        </div>
                        <div>
                            <label for="state" class="formbold-form-label">Select a State</label>
                            <select name="user_state" id="user_state" class="formbold-form-input" required>
                                <option value="">Select a state</option>
                                <% if (userMeta.state) { %>
                                    <!-- Pre-select the user's state if it's available -->
                                    <option value="<%= userMeta.state %>" selected><%= userMeta.state_name %></option>
                                <% } %>
                                <!-- Other states will be loaded dynamically based on the selected country -->
                            </select>
                        </div>
                        
                    </div>

                    <!-- <div class="formbold-input-flex">
                        <div>
                            <label for="register_password" class="formbold-form-label">Password</label>
                            <div class="input-with-icon">
                                <input type="password" name="register_password" placeholder="Please enter a password"
                                    id="register_password" class="formbold-form-input" required />
                                <div class="input-icon"><i class="fa-solid fa-eye-slash eye-change"
                                        id="togglePassword"></i></div>
                            </div>
                            <span id="passwordLengthError" style="color: red; display: none;">Password must be between 8
                                and
                                30 characters.</span>
                        </div>
                        <div>
                            <label for="register_confirm_password" class="formbold-form-label">Confirm Password</label>
                            <div class="input-with-icon">
                                <input type="password" name="register_confirm_password"
                                    placeholder="Please confirm your password" id="register_confirm_password"
                                    class="formbold-form-input" required />
                                <div class="input-icon"><i class="fa-solid fa-eye-slash eye-change"
                                        id="toggleConfirmPassword"></i></div>
                            </div>
                            <span id="passwordMismatchError" style="color: red; display: none;">Passwords do not
                                match.</span>
                        </div>
                    </div> -->

                </div>
                <div class="formbold-form-step-2 form-step">
                    <input type="hidden" name="parent_id" id="parent_id" placeholder="parent company" value="0"
                        class="formbold-form-input" />
                    <div>
                        <p>Price per user: $<span id="price-per-user"></span></p>
                        <p>No of users for the plan : <span id="user_number"></span></p>
                        <label for="memberCounts" class="formbold-form-label">Add On Users</label>
                        <input type="number" min="1" name="memberCount" id="member-count"
                            placeholder="Enter the number of add-on users" class="formbold-form-input" required />
                    </div>
                    <div>
                        <label for="main_address_country" class="formbold-form-label">Select a Country</label>
                        <select name="main_address_country" id="main_address_country" class="formbold-form-input"
                            required>
                            <option value="">Select a country</option>
                            <% getCountriesList.forEach(country=> { %>
                                <option value="<%= country.shortname %>">
                                    <%= country.name %>
                                </option>
                                <% }); %>
                        </select>
                    </div>
                    <div>
                        <label for="company_name" class="formbold-form-label">Organization Name</label>
                        <input type="text" name="company_name" id="company_name" placeholder="Enter your organization name"
                            class="formbold-form-input" required />
                        <span id="companyCheckResult" class="result-message" style="color: red;"></span>
                    </div>
                    <div>
                        <label for="main_address" class="formbold-form-label">Organization Address</label>
                        <input type="text" name="main_address" id="main_address"
                            placeholder="Enter your organization address" class="formbold-form-input" required />
                    </div>
                    <div>
                        <label for="companyEmail" class="formbold-form-label">Organization Email</label>
                        <input type="email" name="comp_email" id="comp_email" placeholder="Enter your organization email"
                            class="formbold-form-input" required />
                        <span id="companyemailAvailabilityError" style="color: red; display: none;"></span>
                    </div>

                    <div>
                        <label for="comp_phone" class="formbold-form-label">Organization Phone</label>
                        <input type="number" name="comp_phone" id="comp_phone" placeholder="Enter your organization phone"
                            class="formbold-form-input" required />
                        <span id="companyphoneAvailabilityError" style="color: red; display: none;"></span>
                    </div>
                    <!-- <div>
                        <label for="main_address_country" class="formbold-form-label">Country</label>
                        <input type="text" name="main_address_country" id="main_address_country" placeholder="Enter country"
                            class="formbold-form-input" required />
                    </div> -->
                    <div>
                        <label for="main_address_pin_code" class="formbold-form-label">Pincode</label>
                        <input type="text" name="main_address_pin_code" id="main_address_pin_code"
                            placeholder="Enter the pincode" class="formbold-form-input" required />
                    </div>
                </div>
                <div class="formbold-form-step-3 form-step">
                    <div class="formbold-form-confirm" id="confirmed">
                        <p>Number of added Amount: <span id="member-count-display">0</span></p>
                        <p>Added user Amount: <span id="user-amount-count-display"></span>
                        <p>Plan Amount: <span id="plan-price"></span>
                            
                        </span></p>
                        <p>Total Amount: <span id="amount-count-display">
                            $<%= total_price / 1 %>
                        </span></p>
                        <p>Are you sure you want to submit the form?</p>
                        
                        <div>
                            <button type="button" class="formbold-confirm-btn active"
                                onclick="handleConfirmation(true)">Proceed</button>
                        </div>
                    </div>
                </div>
                <div class="formbold-form-btn-wrapper">
                    <button type="button" class="formbold-back-btn" onclick="prevStep()">Back</button>
                    <button type="button" id="nextStepBtn" class="formbold-btn" onclick="nextStep()">Next
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <g clip-path="url(#clip0_1675_1807)">
                                <path
                                    d="M10.7814 7.33312L7.20541 3.75712L8.14808 2.81445L13.3334 7.99979L8.14808 13.1851L7.20541 12.2425L10.7814 8.66645H2.66675V7.33312H10.7814Z"
                                    fill="white" />
                            </g>
                            <defs>
                                <clipPath id="clip0_1675_1807">
                                    <rect width="16" height="16" fill="white" />
                                </clipPath>
                            </defs>
                        </svg>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div id="paymentModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal()">&times;</span>
            <h2>Payment Information</h2>

            <!-- Error message container -->
            <div id="error-message" style="color: red;"></div>

            <!-- Container for Stripe Elements -->
            <label for="card_number" class="formbold-form-label">Card Number</label>
            <div id="card-number" class="formbold-form-input"></div>

            <label for="card_expiry" class="formbold-form-label">Expiry Date</label>
            <div id="card-expiry" class="formbold-form-input"></div>

            <label for="card_cvv" class="formbold-form-label">CVV</label>
            <div id="card-cvc" class="formbold-form-input"></div>

            <button type="button" id="pay-now" class="formbold-btn">Pay Now</button>
            <div id="wait-message-container"></div> 
        </div>
    </div>



    <%- include('common/footer') -%>

        <style>
               #paymentModal .modal-content {
                    position: absolute;
                    width: 30%;
                    transform: translate(-50%, -50%);
                    left: 50%;
                    top: 50%;
                    padding: 0 40px 70px;
                }
                #paymentModal .modal-content .close-button{
                    text-align: right;
                    font-size: 50px;
                    padding-right: 0px;
                }
                #paymentModal .modal-content h2{
                    margin-bottom: 25px;
                }
                #paymentModal .modal-content .formbold-form-label {
                    color: black;
                    font-size: 18px;
                    line-height: 25px;
                    margin-bottom: 13px;
                }
                #paymentModal .modal-content .formbold-form-input {
                    margin-bottom: 23px;
                }
                #paymentModal .modal-content #pay-now{
                    text-align: center;
                    justify-content: center;
                    font-weight: 700;
                }
                #wait-message-container p {
                    margin: 0;
                    text-align: center;
                    margin: 25px 0;
                    font-size: 18px;
                    font-weight: 600;
                }
                @media (max-width:1199px){
                    #paymentModal .modal-content {
                    width: 60%;
                }
                }
                @media (max-width:765px){
                    #paymentModal .modal-content {
                    width: 80%;
                }
                }
                @media (max-width:575px){
                    #paymentModal .modal-content {
                    width: 85%;
                    padding: 0 20px 70px;
                }
                .formbold-form-input {
                    width: 100%;
                    padding: 12px 10px;
                }
                }

        </style>


        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

        <script src="https://js.stripe.com/v3/"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        <script>
            var stripe_key = '<%= stripe_key%>';
            console.log("stripe_key", stripe_key);
            var stripePublicKey='<%= stripe_publish_key %>';
            console.log("publish",stripePublicKey);
            
            var planID = '<%= planID %>';
            // var memberCount = '<%= memberCount %>';
            var subscriptionType = '<%= subscriptionType%>';
            console.log("subscriptionType", subscriptionType);
            let currentStep = 1;




            function showStep(step) {
                document.querySelectorAll('.form-step').forEach((el, index) => {
                    el.classList.toggle('active', index + 1 === step);
                });

                document.querySelectorAll('.formbold-step-menu1, .formbold-step-menu2, .formbold-step-menu3').forEach((el, index) => {
                    el.classList.toggle('active', index + 1 === step);
                });

                const backButton = document.querySelector('.formbold-back-btn');
                backButton.style.display = step === 1 ? 'none' : 'block';

                const nextButton = document.getElementById('nextStepBtn');
                nextButton.style.display = step === 3 ? 'none' : 'block';
            }

            function nextStep() {
                if (validateStep(currentStep)) {
                    currentStep++;
                    showStep(currentStep);
                } else {
                    Swal.fire({
                        icon: 'error',
                        text: 'Please fill out all required fields correctly before proceeding.'
                    });
                }
            }

            function prevStep() {
                currentStep--;
                showStep(currentStep);
            }

            function validateStep(step) {
                if (step === 1) {
                    const email = document.getElementById('email').value.trim();
                    if (!email) return false;

                    return document.getElementById('user_country').value.trim() &&
                        document.getElementById('user_state').value.trim();

                    return true;
                } else if (step === 2) {
                    return document.getElementById('company_name').value.trim() &&
                        document.getElementById('main_address').value.trim() &&
                        document.getElementById('comp_email').value.trim() &&
                        document.getElementById('comp_phone').value.trim() &&
                        document.getElementById('main_address_country').value &&
                        document.getElementById('main_address_pin_code').value.trim();
                }
                return true;
            }

            async function handleConfirmation(confirmed) {
                if (confirmed) {
                
                        document.getElementById('paymentModal').style.display = 'block';
                }
            }
            document.addEventListener('DOMContentLoaded', function () {
            const stripe = Stripe(stripePublicKey);
            const elements = stripe.elements();


            const cardNumber = elements.create('cardNumber', {
                style: {
                    base: {
                        fontSize: '16px',
                        color: '#32325d',
                        '::placeholder': {
                            color: '#aab7c4',
                        },
                    },
                    invalid: {
                        color: '#fa755a',
                        iconColor: '#fa755a',
                    },
                },
            });
            const cardExpiry = elements.create('cardExpiry', {
                style: {
                    base: {
                        fontSize: '16px',
                        color: '#32325d',
                        '::placeholder': {
                            color: '#aab7c4',
                        },
                    },
                    invalid: {
                        color: '#fa755a',
                        iconColor: '#fa755a',
                    },
                },
            });
            const cardCvc = elements.create('cardCvc', {
                style: {
                    base: {
                        fontSize: '16px',
                        color: '#32325d',
                        '::placeholder': {
                            color: '#aab7c4',
                        },
                    },
                    invalid: {
                        color: '#fa755a',
                        iconColor: '#fa755a',
                    },
                },
            });

            cardNumber.mount('#card-number');
            cardExpiry.mount('#card-expiry');
            cardCvc.mount('#card-cvc');

            function handleCardChange(event) {
                const errorMessage = document.getElementById('error-message');
                if (event.error) {
                    errorMessage.textContent = event.error.message;
                } else {
                    errorMessage.textContent = '';
                }
            }

            cardNumber.on('change', handleCardChange);
            cardExpiry.on('change', handleCardChange);
            cardCvc.on('change', handleCardChange);

            document.getElementById('pay-now').addEventListener('click', async (event) => {
                event.preventDefault();
                document.querySelector('button').disabled = true;

                const payNowButton = document.getElementById('pay-now');
                payNowButton.disabled = true;

                const waitMessageContainer = document.getElementById('wait-message-container');
                console.log("waitMessageContainer",waitMessageContainer);
                
                waitMessageContainer.innerHTML = '<p style="color: black;">Please wait...</p>';  

                try {
                    const { paymentMethod, error } = await stripe.createPaymentMethod({
                        type: 'card',
                        card: cardNumber,
                        billing_details: {
                            name: document.getElementById('first_name').value + ' ' + document.getElementById('last_name').value,
                            email: document.getElementById('email').value,
                            phone: document.getElementById('phone').value,
                            address: {
                                line1: document.getElementById('main_address').value,
                                country: document.getElementById('main_address_country').value,
                                postal_code: document.getElementById('main_address_pin_code').value,
                            },
                        },
                    });

                    if (error) {
                        document.getElementById('error-message').textContent = error.message;
                        document.querySelector('button').disabled = false;
                        return;
                    }

                    const memberCount = document.getElementById('member-count').value;

                    const formData = {
                        name: document.getElementById('first_name').value + ' ' + document.getElementById('last_name').value,
                        first_name: document.getElementById('first_name').value,
                        last_name: document.getElementById('last_name').value,
                        email: document.getElementById('email').value,
                        phone: document.getElementById('phone').value,
                        address: document.getElementById('main_address').value,
                        main_address_country: document.getElementById('main_address_country').value,
                        company_name: document.getElementById('company_name').value,
                        parent_id: document.getElementById('parent_id').value,
                        comp_email: document.getElementById('comp_email').value,
                        comp_phone: document.getElementById('comp_phone').value,
                        city: 'Default City',
                        state: 'Default State',
                        main_address_pin_code: document.getElementById('main_address_pin_code').value,
                        planId: planID,
                        billingCycle: subscriptionType,
                        memberCount: memberCount,
                        user_country: document.getElementById('user_country').value,
                        user_state: document.getElementById('user_state').value,
                        paymentMethodId: paymentMethod.id 
                    };

                    const response = await fetch('/auth/createexternalSubscription', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData),
                    });

                    const data = await response.json();
                    console.log("subscriptiondata",data);
                    
                    const subscriptionId = data.subscription; 
                    formData.subscriptionId = subscriptionId;
                    // if (response.ok) {
                    //     console.log("datasss",data);
                    //     console.log("data.client_secret",data.client_secret);                     
                    //     const { error, paymentIntent } = await stripe.confirmCardPayment(data.client_secret);
                    //     console.log("paymentIntents",paymentIntent);

                    //     if (error) {
                    //         console.error('Error confirming payment:', error);
                    //         Swal.fire({
                    //             icon: 'error',
                    //             title: 'Payment Error',
                    //             text: error.message || 'There was an error processing your payment. Please try again later.',
                    //             confirmButtonText: 'OK',
                    //         });
                    //     } else if (paymentIntent.status === 'succeeded') {
                    //     //     console.log("successdatasss",data);
                    //     // console.log("successdata.client_secret",data.client_secret);                     
                    //     // const { error, paymentIntent } = await stripe.confirmCardPayment(data.client_secret);
                    //     // console.log("successpaymentIntents",paymentIntent);
                    //         Swal.fire({
                    //             icon: 'success',
                    //             title: 'Payment Successful!',
                    //             text: 'Your subscription is now active.',
                    //             confirmButtonText: 'OK',
                    //         }).then(async () => {
                    //             await createUserAndCompany(formData);
                    //         });
                    //     } else {
                    //         Swal.fire({
                    //             icon: 'error',
                    //             title: 'Payment Error',
                    //             text: 'There was an unexpected issue with your payment. Please try again later.',
                    //             confirmButtonText: 'OK',
                    //         });
                    //     }
                    // } else {
                    //     Swal.fire({
                    //         icon: 'error',
                    //         title: 'Payment Error',
                    //         text: data.error ? data.error.message : 'There was an error processing your payment. Please try again later.',
                    //         confirmButtonText: 'OK',
                    //     });
                    // }
                    if (response.ok && data.status === 'ok' && data.message === 'Payment was successful!') {
                       // console.log("Payment already confirmed:", data);

                        Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful!',
                            text: 'Your subscription is now active.',
                            confirmButtonText: 'OK',
                        }).then(async () => {
                            await createUserAndCompany(formData);
                        });

                    } else if (response.ok && data.client_secret) {
                        const { error, paymentIntent } = await stripe.confirmCardPayment(data.client_secret);
                        //console.log("paymentIntents", paymentIntent);

                        if (error) {
                            console.error('Error confirming payment:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Error',
                                text: error.message || 'There was an error processing your payment. Please try again later.',
                                confirmButtonText: 'OK',
                            });
                        } else if (paymentIntent.status === 'succeeded') {
                            Swal.fire({
                                icon: 'success',
                                title: 'Payment Successful!',
                                text: 'Your subscription is now active.',
                                confirmButtonText: 'OK',
                            }).then(async () => {
                                await createUserAndCompany(formData);
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Error',
                                text: 'There was an unexpected issue with your payment. Please try again later.',
                                confirmButtonText: 'OK',
                            });
                        }
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Error',
                            text: data.error ? data.error.message : 'There was an error processing your payment. Please try again later.',
                            confirmButtonText: 'OK',
                        });
                    }
               
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Error',
                        text: 'There was an error processing your payment. Please try again later.',
                        confirmButtonText: 'OK',
                    });
                } finally {
                    document.querySelector('button').disabled = false;
                }
            });
});

            function closeModal() {
                document.getElementById('paymentModal').style.display = 'none';
            }







            async function createUserAndCompany(formData) {
            try {
                console.log("externalRegistrationformData", formData);
                const response = await axios.post('/auth/externalcompanyRegistration', formData);
                if (response.data.status === 'ok') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Company created successfully. Please wait for admin approval.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/plan-pricing';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.data.message || 'Failed to create user and company. Please try again later.',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error creating user and company:', error);

                // Handling network errors or other undefined response scenarios
                let errorMessage = 'Failed to create user and company. Please try again later.';
                if (error.response) {
                    errorMessage = error.response.data.message || errorMessage;
                } else if (error.message) {
                    errorMessage = error.message;
                }

                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage,
                    confirmButtonText: 'OK'
                });
            }
        }


            document.getElementById('user_country').addEventListener('change', async function () {
                const countryCode = this.value;
                const stateDropdown = document.getElementById('user_state');
                stateDropdown.innerHTML = '<option value="">Select a state</option>';

                if (countryCode) {
                    try {
                        const response = await axios.get(`/getStatesbycountryid?country=${countryCode}`);
                        const states = response.data;

                        states.forEach(state => {
                            const option = document.createElement('option');
                            option.value = state.id;
                            option.textContent = state.name;
                            stateDropdown.appendChild(option);
                        });
                    } catch (error) {
                        console.error('Error fetching states:', error);
                        // alert('Failed to load states. Please try again.');
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed to load states',
                            text: 'Please try again.'
                        });
                    }
                }
            });

            document.getElementById('main_address_pin_code').addEventListener('input', function (e) {
                const value = e.target.value;

                // Example: Format input (if needed), e.g., grouping every 4 characters
                const formattedValue = value.toUpperCase().replace(/[^A-Z0-9]/g, ''); // Remove non-alphanumeric characters and convert to uppercase

                // Update the input field with the formatted value
                e.target.value = formattedValue;
            });






            document.getElementById('comp_email').addEventListener('blur', function () {
                const email = this.value.trim();
                if (email && !isValidEmail(email)) {
                    // Invalid email format
                    // You can handle this programmatically, for example:
                    this.setCustomValidity('Please enter a valid email address.');
                    this.reportValidity();
                    this.focus();
                }
            });


         document.getElementById('email').addEventListener('blur', async function () {
                const email = this.value.trim();
                const emailError = document.getElementById('emailError');
                const emailAvailabilityError = document.getElementById('emailAvailabilityError');
                const nextStepBtn = document.getElementById('nextStepBtn');

                console.log('Email input value:', email);

                // Reset error messages and validation flags
                emailError.style.display = 'none';
                emailAvailabilityError.style.display = 'none';
                this.classList.remove('invalid');
                isEmailValid = false;
                isEmailAvailable = false;

                // Disable the next button initially
                nextStepBtn.disabled = true;

                // Basic email validation
                if (email && !isValidEmail(email)) {
                    emailError.style.display = 'block';
                    this.classList.add('invalid');
                } else {
                    isEmailValid = true;
                    try {
                        const response = await axios.get(`/checkEmailAvailability?email=${email}`);
                       // console.log('Response from server:', response);

                        if (!response.data.available) {
                            emailAvailabilityError.textContent = response.data.message; // Set the error message
                            emailAvailabilityError.style.display = 'block';
                            this.classList.add('invalid');
                        } else {
                            isEmailAvailable = true;
                        }
                    } catch (error) {
                        console.error('Error checking email availability:', error);
                    }
                }

                console.log("isEmailValid", isEmailValid);
                console.log("isEmailAvailable", isEmailAvailable);

                // Enable the Next Step button if email is valid and available
                if (isEmailValid && isEmailAvailable) {
                    nextStepBtn.disabled = false;
                }
            });


            function isValidEmail($email) {
                var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
                return emailReg.test($email);
            }


            document.getElementById('comp_phone').addEventListener('input', function (e) {
                const value = e.target.value;
                if (value.length > 6) {
                    e.target.value = value.slice(0, 10);
                }
            });
            const userCountrySelect = document.getElementById('user_country');
            const userStateSelect = document.getElementById('user_state');
            const nextStepBtn = document.getElementById('nextStepBtn');

            function validateAndNext() {
                const isCountryValid = userCountrySelect.checkValidity();
                const isStateValid = userStateSelect.checkValidity();

                if (isCountryValid && isStateValid) {
                    nextStep();
                } else {
                    alert('Please select both a country and a state.');
                }
            }



        </script>


        <script>
            $(document).ready(function () {
                var memberCount = document.getElementById('member-count').value;
                console.log('Member Countsd:', memberCount);

                function validateForm() {
                    const firstName = $('#first_name').val().trim();
                    const lastName = $('#last_name').val().trim();
                    const dob = $('#dob').val().trim();
                    const phone = $('#phone').val().trim();
                    const email = $('#email').val().trim();
                    const country = $('#user_country').val();
                    const state = $('#user_state').val();

                    // Validate individual fields if required
                    const isFirstNameValid = firstName.length > 0;
                    const isLastNameValid = lastName.length > 0;
                    const isEmailValid = isValidEmail(email); // You can implement isValidEmail function
                    const isCountryValid = country.length > 0;
                    const isStateValid = state.length > 0;
                    const isdobValid = dob.length > 0;
                    const isphoneValid = phone.length > 0;



                    // Display errors if any field is invalid
                    $('#first_name').toggleClass('invalid', !isFirstNameValid);
                    $('#last_name').toggleClass('invalid', !isLastNameValid);
                    $('#email').toggleClass('invalid', !isEmailValid);
                    $('#user_country').toggleClass('invalid', !isCountryValid);
                    $('#user_state').toggleClass('invalid', !isStateValid);
                    $('#dob').toggleClass('invalid', !isdobValid);
                    $('#phone').toggleClass('invalid', !isphoneValid);


                    const isFormValid = isFirstNameValid && isLastNameValid && isEmailValid &&
                        isCountryValid && isStateValid && isdobValid && isphoneValid;
                    $('#nextStepBtn').prop('disabled', !isFormValid);
                }

                $('#first_name, #last_name, #dob,#phone, #email, #user_country, #user_state').on('input change', function () {
                    validateForm();
                });

                // Basic email validation function
                function isValidEmail(email) {
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    return emailRegex.test(email);
                }
            });

            $(document).ready(function () {

                const urlParams = new URLSearchParams(window.location.search);
                const subscriptionTypeparams = urlParams.get('subscriptionType');
                console.log("subscriptionTypeparams", subscriptionTypeparams);

                const total_prices = urlParams.get('total_price');
                console.log("total_prices", total_prices);

                const monthly_price = '<%= monthly_plan_price%>';
                const yearly_price = '<%= yearly_price%>';
                const per_user_price = '<%= per_user_price%>'


                console.log("Subscription Type:", subscriptionType);
                console.log("Monthly Price:", monthly_price);
                console.log("Yearly Price:", yearly_price);
                console.log("per_user_price:", per_user_price);

                let pricePerUser;

                if (subscriptionType === 'monthly') {
                    pricePerUser = parseFloat(per_user_price);
                } else if (subscriptionType === 'yearly') {
                    pricePerUser = parseFloat(per_user_price);
                } else {
                    console.error('Invalid subscription type');
                    return;
                }

                console.log("Price per User:", pricePerUser);

                function validateForm1() {
                    const parentId = $('#parent_id').val().trim();
                    const companyName = $('#company_name').val().trim();
                    const mainAddress = $('#main_address').val().trim();
                    const companyEmail = $('#comp_email').val().trim();
                    const companyPhone = $('#comp_phone').val().trim();
                    const mainAddressCountry = $('#main_address_country').val().trim();
                    const mainAddressPinCode = $('#main_address_pin_code').val().trim();

                    // Validate individual fields if required
                    const isParentIdValid = parentId.length > 0;
                    const isCompanyNameValid = companyName.length > 0;
                    const isMainAddressValid = mainAddress.length > 0;
                    const isCompanyEmailValid = isValidEmail(companyEmail); // Implement isValidEmail function
                    const isCompanyPhoneValid = companyPhone.length > 0;
                    const isMainAddressCountryValid = mainAddressCountry.length > 0;
                    const isMainAddressPinCodeValid = mainAddressPinCode.length > 0;

                    // Display errors if any field is invalid
                    $('#parent_id').toggleClass('invalid', !isParentIdValid);
                    $('#company_name').toggleClass('invalid', !isCompanyNameValid);
                    $('#main_address').toggleClass('invalid', !isMainAddressValid);
                    $('#comp_email').toggleClass('invalid', !isCompanyEmailValid);
                    $('#comp_phone').toggleClass('invalid', !isCompanyPhoneValid);
                    $('#main_address_country').toggleClass('invalid', !isMainAddressCountryValid);
                    $('#main_address_pin_code').toggleClass('invalid', !isMainAddressPinCodeValid);

                    // Enable Next button if all fields are valid
                    const isFormValid = isParentIdValid && isCompanyNameValid && isMainAddressValid &&
                        isCompanyEmailValid && isCompanyPhoneValid && isMainAddressCountryValid && isMainAddressPinCodeValid;
                    $('#nextStepBtn').prop('disabled', !isFormValid);
                }

                $('#parent_id, #company_name, #main_address, #comp_email, #comp_phone, #main_address_country, #main_address_pin_code').on('input change', function () {
                    validateForm1();
                });

                $('#company_name').on('input', function () {
                    const companyName = $(this).val().trim();
                    const mainAddressCountry = $('#main_address_country').val().trim();

                    // Call backend to check if company name exists for selected country
                    if (companyName.length > 0 && mainAddressCountry.length > 0) {
                        const parentId = $('#parent_id').val().trim(); // Define parentId here
                        checkCompanyExistence(parentId, companyName, mainAddressCountry);
                    }
                });

                // Function to check if company exists asynchronously
                async function checkCompanyExistence(parentId, companyName, mainAddressCountry) {
                    try {
                        const response = await $.ajax({
                            url: '/get-exist-company',
                            method: 'GET',
                            data: {
                                parent_id: parentId,
                                company_name: companyName,
                                main_address_country: mainAddressCountry
                            }
                        });
                        // console.log("responsesss", response);
                        // console.log("responsesssstatus", response.status);

                        if (response.status == 'err') {
                            console.log("errr");
                            $('#companyCheckResult').text(response.message).show();
                            $('#nextStepBtn').prop('disabled', true); 
                        } else {
                            // console.log("rightttt");
                            $('#companyCheckResult').hide();
                            validateForm1(); 
                        }
                    } catch (error) {
                        console.error('Error checking company existence:', error);
                    }
                }

                function isValidEmail(email) {
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    return emailRegex.test(email);
                }
                $('#comp_email').on('input', function () {
                    const email = $(this).val().trim();

                    if (email.length > 0) {
                        if (!isValidEmail(email)) {
                            $('#companyemailAvailabilityError').text('Invalid email format').show();
                            $('#nextStepBtn').prop('disabled', true);
                        } else {
                            $.ajax({
                                url: '/checkcompanyEmailAvailability',
                                method: 'GET',
                                data: { email: email },
                                success: function (response) {
                                    //console.log('Response from server:', response);
                                    if (!response.available) {
                                        $('#companyemailAvailabilityError').text(response.message).show();
                                        $('#nextStepBtn').prop('disabled', true);
                                    } else {
                                        $('#companyemailAvailabilityError').hide();
                                        validateForm1(); 
                                    }
                                },
                                error: function (error) {
                                    console.error('Error checking email availability:', error);
                                }
                            });
                        }
                    } else {
                        $('#companyemailAvailabilityError').hide();
                    }
                });

                $('#comp_phone').on('input', function () {
                    const comp_phone = $(this).val().trim();

                    if (comp_phone.length > 0) {
                        $.ajax({
                            url: '/checkcompanyPhoneAvailability',
                            method: 'GET',
                            data: { comp_phone: comp_phone },
                            success: function (response) {
                               // console.log('Response from server:', response);
                                if (!response.available) {
                                    $('#companyphoneAvailabilityError').text(response.message).show();
                                    $('#nextStepBtn').prop('disabled', true);
                                } else {
                                    $('#companyphoneAvailabilityError').hide();
                                    validateForm1(); 
                                }
                            },
                            error: function (error) {
                                console.error('Error checking email availability:', error);
                            }
                        });

                    } else {
                        $('#companyphoneAvailabilityError').hide();
                    }
                });

                $('#phone').on('input', function () {
                    let phone = $(this).val().trim();
                    if (phone.length > 10) {
                        phone = phone.slice(0, 10);
                        $(this).val(phone);
                    }

                    if (phone.length === 10 && /^\d+$/.test(phone)) {
                        $.ajax({
                            url: '/checkregistereduserPhoneAvailability',
                            method: 'GET',
                            data: { phone: phone },
                            success: function (response) {
                                // console.log('Response from server:', response);
                                if (!response.available) {
                                    $('#phoneavailabilityerror').text(response.message).show();
                                    $('#nextStepBtn').prop('disabled', true);
                                } else {
                                    $('#phoneavailabilityerror').hide();
                                    validateForm1(); // Re-validate form after email check
                                }
                            },
                            error: function (error) {
                                console.error('Error checking email availability:', error);
                            }
                        });

                    } else {
                        $('#phoneavailabilityerror').hide();
                    }
                });





                function updateMemberCountDisplay() {
                    var memberCount_val = $('#member-count').val();
                    if (memberCount_val === "") {
                        memberCount_val = 0;
                    }
                    $('#member-count-display').text(memberCount_val);

                    const totalAmount = memberCount_val * pricePerUser;
                    console.log("Total Amount Calculated:", totalAmount.toFixed(2));
                    const total_prices = parseFloat(urlParams.get('total_price'));
                    console.log("total_prices", total_prices);

                    const alltotal_amount = totalAmount + total_prices;
                    console.log("alltotal_amount", alltotal_amount.toFixed(2));
                    var allamount = alltotal_amount/1;

                    // if (memberCount_val > 0) {
                    //     $('#amount-count-display').text(alltotal_amount.toFixed(2));
                    // } else {
                    //     $('#amount-count-display').text('<%= total_price%>');
                    // }
                    if (memberCount_val > 0) {
                        $('#user-amount-count-display').text(`$${parseFloat(totalAmount).toFixed(1).replace(/\.0$/, '')}`);

                        $('#plan-price').text(`$${parseFloat(total_prices).toFixed(1).replace(/\.0$/, '')}`);

                        $('#amount-count-display').text(`$${parseFloat(allamount).toFixed(1).replace(/\.0$/, '')}`);
                    } else {
                        console.log("without members");
                        
                        const total_price = '<%= total_price %>'; 
                        $('#user-amount-count-display').text(`$${parseFloat(totalAmount).toFixed(1).replace(/\.0$/, '')}`);
                        $('#plan-price').text(`$${parseFloat(total_prices).toFixed(1).replace(/\.0$/, '')}`);

                        $('#amount-count-display').text(`$${parseFloat(total_price).toFixed(1).replace(/\.0$/, '')}`);
                    }
                }

                $('#member-count').on('input', function () {
                    updateMemberCountDisplay();
                });
                updateMemberCountDisplay();

                $('.formbold-form-step-1').each(function () {
                    $('.formbold-back-btn').css('display', 'none');
                });


                const perUserPrice = parseFloat('<%= per_user_price || 0 %>');
                const perUserNo = Math.round('<%= user_no || 0 %>');
        

                $('#price-per-user').text(perUserPrice.toFixed(2));
                $('#user_number').text(perUserNo);

            });


        </script>




        <style>
            @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@100;300;400;500;600&display=swap');

            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: "Inter", sans-serif;
            }

            .formbold-main-wrapper {
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 48px;
            }

            .formbold-form-wrapper {
                margin: 0 auto;
                max-width: 550px;
                width: 100%;
                background: white;
            }

            .formbold-steps {
                padding-bottom: 18px;
                margin-bottom: 35px;
                border-bottom: 1px solid #DDE3EC;
            }

            .formbold-steps ul {
                padding: 0;
                margin: 0;
                list-style: none;
                display: flex;
                gap: 40px;
            }

            .formbold-input {
                margin-bottom: 25px;
            }

            .formbold-steps li {
                display: flex;
                align-items: center;
                gap: 14px;
                font-weight: 500;
                font-size: 16px;
                line-height: 24px;
                color: #536387;
            }

            .formbold-steps li span {
                display: flex;
                align-items: center;
                justify-content: center;
                background: #DDE3EC;
                border-radius: 50%;
                width: 36px;
                height: 36px;
                font-weight: 500;
                font-size: 16px;
                line-height: 24px;
                color: #536387;
            }

            .formbold-steps li.active {
                color: #07074D;
                ;
            }

            .formbold-steps li.active span {
                background: #6A64F1;
                color: #FFFFFF;
            }

            .formbold-input-flex {
                display: flex;
                gap: 20px;
                margin-bottom: 22px;
            }

            .formbold-input-flex>div {
                width: 50%;
            }

            .formbold-form-input {
                width: 100%;
                padding: 13px 22px;
                border-radius: 5px;
                border: 1px solid #DDE3EC;
                background: #FFFFFF;
                font-weight: 500;
                font-size: 16px;
                color: #536387;
                outline: none;
                resize: none;
            }

            .formbold-form-input:focus {
                border-color: #6a64f1;
                box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.05);
            }

            .formbold-form-label {
                color: #07074D;
                font-weight: 500;
                font-size: 14px;
                line-height: 24px;
                display: block;
                margin-bottom: 10px;
            }

            .formbold-form-confirm {
                border-bottom: 1px solid #DDE3EC;
                padding-bottom: 35px;
            }

            .formbold-form-confirm p {
                font-size: 16px;
                line-height: 24px;
                color: #536387;
                margin-bottom: 22px;
                width: 75%;
            }

            .formbold-form-confirm>div {
                display: flex;
                gap: 15px;
            }

            .formbold-confirm-btn {
                display: flex;
                align-items: center;
                gap: 10px;
                background: #FFFFFF;
                border: 0.5px solid #DDE3EC;
                border-radius: 5px;
                font-size: 16px;
                line-height: 24px;
                color: #536387;
                cursor: pointer;
                padding: 10px 20px;
                transition: all .3s ease-in-out;
            }

            .formbold-confirm-btn {
                box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.12);
            }

            .formbold-confirm-btn.active {
                background: #6A64F1;
                color: #FFFFFF;
            }

            .formbold-form-step-1,
            .formbold-form-step-2,
            .formbold-form-step-3 {
                display: none;
            }

            .formbold-form-step-1.active,
            .formbold-form-step-2.active,
            .formbold-form-step-3.active {
                display: block;
            }

            .formbold-form-btn-wrapper {
                display: flex;
                align-items: center;
                justify-content: flex-end;
                gap: 25px;
                margin-top: 25px;
            }

            .formbold-back-btn {
                cursor: pointer;
                background: #FFFFFF;
                border: none;
                color: #07074D;
                font-weight: 500;
                font-size: 16px;
                line-height: 24px;
                /* display: none; */
            }

            .formbold-back-btn.active {
                display: block;
            }

            .formbold-btn {
                display: flex;
                align-items: center;
                gap: 5px;
                font-size: 16px;
                border-radius: 5px;
                padding: 10px 25px;
                border: none;
                font-weight: 500;
                background-color: #6A64F1;
                color: white;
                cursor: pointer;
            }

            .formbold-btn:hover {
                box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.05);
            }

            .formbold-steps li.active span {
                background: #FCCB06;
                color: #FFFFFF;
            }

            .formbold-form-input {
                width: 100%;
                padding: 13px 22px;
                border-radius: 5px;
                border: 1px solid #ffc107;
            }

            .input-with-icon {
                position: relative;
            }

            .formbold-form-wrapper {
                max-width: 630px;
                padding: 40px 0;
            }

            .formbold-back-btn {
                display: flex;
                align-items: center;
                gap: 5px;
                font-size: 16px;
                border-radius: 5px;
                padding: 10px 25px;
            }

            .formbold-btn,
            .formbold-back-btn,
            .formbold-confirm-btn.active {
                font-weight: 600;
                color: white;
                cursor: pointer;
                background: black;
                border: 3px solid #ffc107;
            }

            .formbold-btn:hover,
            .formbold-back-btn:hover,
            .formbold-confirm-btn.active:hover {
                background: #ffc107;
                color: black;
                border: 3px solid black;
            }

            .formbold-btn:hover svg path {
                fill: black !important;
            }

            .formbold-form-step-2.form-step.active div {
                margin-bottom: 20px;
            }

            body {
                padding-right: 0 !important;
            }

            .formbold-form-confirm p {
                margin-bottom: 15px;
                color: black;
                font-weight: 700;
                border-radius: 0 15px;
            }

            .formbold-form-confirm {
                background: #ffc107;
                padding: 30px;
                border-radius: 10px;
                border: 2px solid black;
            }

            @media (max-width:575px) {
                .formbold-input-flex>div {
                    width: 100%;
                }

                .formbold-input-flex>div {
                    margin-bottom: 20px;
                }

                .formbold-input-flex {
                    display: block;
                    margin-bottom: 20px;
                }

                .formbold-steps ul {
                    gap: 15px;
                    justify-content: space-between;
                }

                .formbold-steps li {
                    gap: 10px;
                    font-size: 15px;
                }
            }

            @media (max-width:420px) {
                .formbold-steps ul {
                    gap: 14px;
                    justify-content: center;
                    flex-wrap: wrap;
                    flex-direction: column;
                }
            }
        </style>

        </body>

        </html>