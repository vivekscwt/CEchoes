<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Step Form with Razorpay</title>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

</head>

<body>
    <div class="formbold-form-wrapper">
        <form id="multiStepForm">
            <div class="formbold-steps">
                <ul>
                    <li class="formbold-step-menu1 active"><span>1</span>Sign Up</li>
                    <li class="formbold-step-menu2"><span>2</span>Company Details</li>
                    <li class="formbold-step-menu3"><span>3</span>Confirm</li>
                </ul>
            </div>
            <div class="formbold-form-step-1 form-step active">
                <div>
                    <label for="member_count" class="formbold-form-label">Add On users<%= memberCount%></label>
                </div>
                <div class="formbold-input-flex">
                    <div>
                        <label for="first_name" class="formbold-form-label">First name</label>
                        <input type="text" name="first_name" placeholder="Andrio" id="first_name"
                            class="formbold-form-input" required />
                    </div>
                    <div>
                        <label for="last_name" class="formbold-form-label">Last name</label>
                        <input type="text" name="last_name" placeholder="Dolee" id="last_name"
                            class="formbold-form-input" required />
                    </div>
                </div>
                <div class="formbold-input-flex">
                    <div>
                        <label for="dob" class="formbold-form-label">Date of Birth</label>
                        <input type="date" name="dob" id="dob" class="formbold-form-input" required />
                    </div>
                    <div>
                        <label for="email" class="formbold-form-label">Email Address</label>
                        <input type="email" name="email" placeholder="example@mail.com" id="email"
                            class="formbold-form-input" required />
                    </div>
                </div>
                <div class="formbold-input-flex">
                    <div>
                        <label for="user_country" class="formbold-form-label">Select a Country</label>
                        <select name="user_country" id="user_country" class="formbold-form-input" required>
                            <option value="">Select a country</option>
                            <% getCountries.forEach(country=> { %>
                                <option value="<%= country.id %>">
                                    <%= country.name %>
                                </option>
                                <% }); %>
                        </select>
                    </div>
                    <div>
                        <label for="state" class="formbold-form-label">Select a State</label>
                        <select name="user_state" id="user_state" class="formbold-form-input" required>
                            <option value="">Select a state</option>
                        </select>
                    </div>
                </div>

                <div class="formbold-input-flex">
                    <div>
                        <label for="register_password" class="formbold-form-label">Password</label>
                        <input type="password" name="register_password" placeholder="Please enter 8 characters password"
                            id="register_password" class="formbold-form-input" required />
                    </div>
                    <div>
                        <label for="register_confirm_password" class="formbold-form-label">Confirm Password</label>
                        <input type="password" name="register_confirm_password"
                            placeholder="Please enter 8 characters password" id="register_confirm_password"
                            class="formbold-form-input" required />
                    </div>
                </div>
            </div>
            <div class="formbold-form-step-2 form-step">
                <input type="text" name="parent_id" id="parent_id" placeholder="parent company" value="0"
                    class="formbold-form-input" />
                <div>
                    <label for="company_name" class="formbold-form-label">Company Name</label>
                    <input type="text" name="company_name" id="company_name" placeholder="Enter your company name"
                        class="formbold-form-input" required />
                </div>
                <div>
                    <label for="main_address" class="formbold-form-label">Company Address</label>
                    <input type="text" name="main_address" id="main_address" placeholder="Enter your company address"
                        class="formbold-form-input" required />
                </div>
                <div>
                    <label for="companyEmail" class="formbold-form-label">Company Email</label>
                    <input type="email" name="comp_email" id="comp_email" placeholder="Enter your company email"
                        class="formbold-form-input" required />
                </div>
                <div>
                    <label for="comp_phone" class="formbold-form-label">Company Phone</label>
                    <input type="tel" name="comp_phone" id="comp_phone" placeholder="Enter your company phone"
                        class="formbold-form-input" required />
                </div>
                <!-- <div>
                    <label for="main_address_country" class="formbold-form-label">Country</label>
                    <input type="text" name="main_address_country" id="main_address_country" placeholder="Enter country"
                        class="formbold-form-input" required />
                </div> -->
                <div>
                    <label for="main_address_country" class="formbold-form-label">Select a Country</label>
                    <select name="main_address_country" id="main_address_country" class="formbold-form-input" required>
                        <option value="">Select a country</option>
                        <% getCountriesList.forEach(country=> { %>
                            <option value="<%= country.shortname %>">
                                <%= country.name %>
                            </option>
                            <% }); %>
                    </select>
                </div>
                <div>
                    <label for="main_address_pin_code" class="formbold-form-label">Pincode</label>
                    <input type="text" name="main_address_pin_code" id="main_address_pin_code"
                        placeholder="Enter the pincode" class="formbold-form-input" required />
                </div>
            </div>
            <div class="formbold-form-step-3 form-step">
                <div class="formbold-form-confirm">
                    <p>Are you sure!You want to submit the form?</p>
                    <div>
                        <button type="button" class="formbold-confirm-btn active"
                            onclick="handleConfirmation(true)">Yes</button>
                        <button type="button" class="formbold-confirm-btn" onclick="handleConfirmation(false)">No</button>
                    </div>
                </div>
            </div>
            <div class="formbold-form-btn-wrapper">
                <button type="button" class="formbold-back-btn" onclick="prevStep()">Back</button>
                <button type="button" class="formbold-btn" onclick="nextStep()">Next Step
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g clip-path="url(#clip0_1675_1807)">
                            <path
                                d="M10.7814 7.33312L7.20541 3.75712L8.14808 2.81445L13.3334 7.99979L8.14808 13.1851L7.20541 12.2425L10.7814 8.66645H2.66675V7.33312H10.7814Z"
                                fill="white" />
                        </g>
                        <defs>
                            <clipPath id="clip0_1675_1807">
                                <rect width="16" height="16" fill="white" />
                            </clipPath>
                        </defs>
                    </svg>
                </button>
            </div>
        </form>
    </div>



    <script>
        var razorpay_key = '<%= razorpay_key%>';
		console.log("razorpay_key",razorpay_key);
        var planID = '<%= planID %>';
        var memberCount='<%= memberCount %>'
        let currentStep = 1;

        function showStep(step) {
            document.querySelectorAll('.form-step').forEach((el, index) => {
                el.classList.remove('active');
                if (index + 1 === step) {
                    el.classList.add('active');
                }
            });

            document.querySelectorAll('.formbold-step-menu1, .formbold-step-menu2, .formbold-step-menu3').forEach((el, index) => {
                el.classList.remove('active');
                if (index + 1 === step) {
                    el.classList.add('active');
                }
            });


            const backButton = document.querySelector('.formbold-back-btn');
            if (step === 1) {
                backButton.style.display = 'none'; 
            } else {
                backButton.style.display = 'block'; 
            }
        }

        function nextStep() {
            if (validateStep(currentStep)) {
                currentStep++;
                showStep(currentStep);
            } else {
                //alert('Please fill out all required fields correctly before proceeding.');
                Swal.fire({
                    icon: 'error',
                    // title: 'Failed to load states',
                    text: 'Please fill out all required fields correctly before proceeding.'
                });
            }
        }

        function prevStep() {
            currentStep--;
            showStep(currentStep);
        }

        function validateStep(step) {
                    if (step === 1) {
                        const email = document.getElementById('email').value.trim();
                        if (!email) {
                            return false;
                        }
                        return true;
                    } else if (step === 2) {
                        const password = document.getElementById('register_password').value;
                        if (password.length < 8 || password.length > 30) {
                            return false;
                        }
                        return true;
                    } else if (step === 3) {
                        const confirmPassword = document.getElementById('register_confirm_password').value;
                        if (confirmPassword.length < 8 || confirmPassword.length > 30) {
                            return false;
                        }
                        const password = document.getElementById('register_password').value;
                        if (confirmPassword !== password) {
                            return false;
                        }
                        return true;
                    }
                    return true; 
                }

        async function handleConfirmation(confirmed) {
            if (confirmed) {
                try {
                    const formData = {
                        name: document.getElementById('first_name').value + ' ' + document.getElementById('last_name').value,
                        first_name: document.getElementById('first_name').value,
                        last_name: document.getElementById('last_name').value,
                        email: document.getElementById('email').value,
                        address: document.getElementById('main_address').value,
                        main_address_country: document.getElementById('main_address_country').value,
                        company_name: document.getElementById('company_name').value,
                        parent_id: document.getElementById('parent_id').value,
                        comp_email: document.getElementById('comp_email').value,
                        city: 'Default City',
                        state: 'Default State',
                        zip: document.getElementById('main_address_pin_code').value,
                        planId: planID,
                        billingCycle: 'daily',
                        memberCount: memberCount,
                        register_password: document.getElementById('register_password').value,
                        register_confirm_password: document.getElementById('register_confirm_password').value,
                        user_country: document.getElementById('user_country').value,
                        user_state: document.getElementById('user_state').value,
                    };

                    const response = await axios.post('/auth/createexternalSubscription', formData);
                    const { subscription, amount } = response.data;

                    formData.subscriptionId = subscription.id;

                    const options = {
                        //key: 'rzp_test_ivrp5LlA1gQXAT',
                        key: razorpay_key,
                        subscription_id: subscription.id,
                        name: 'Subscription Payment',
                        description: `Subscription Payment: ₹${(amount / 100).toFixed(2)}`, // Display amount in rupees
                        amount: amount, // Amount in paise
                        handler: function (response) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Payment Successful!',
                                text: 'Your payment was successful.',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                // Post payment success, create user and company
                                createUserAndCompany(formData);
                            });
                        },
                        prefill: {
                            name: formData.name,
                            email: formData.email
                        },
                        theme: {
                            color: '#F37254'
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();

                    rzp.on('payment.failed', function (response) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Error',
                            text: response.error.description || 'Unknown error occurred.',
                            confirmButtonText: 'OK'
                        });
                    });
                } catch (error) {
                    console.error('Error initiating payment:', error);
                    let errorMessage = 'Failed to initiate payment. Please try again later.';

                    if (error.response) {
                        // If error.response exists, use its data
                        errorMessage = error.response.data.message || errorMessage;
                    } else if (error.message) {
                        // If error.message exists, use it
                        errorMessage = error.message;
                    }

                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Initiation Failed',
                        text: errorMessage,
                        confirmButtonText: 'OK'
                    });
                }
            }
        }

//         async function handleConfirmation(confirmed) {
//     if (confirmed) {
//         try {
//             const formData = {
//                 name: document.getElementById('first_name').value + ' ' + document.getElementById('last_name').value,
//                 first_name: document.getElementById('first_name').value,
//                 last_name: document.getElementById('last_name').value,
//                 email: document.getElementById('email').value,
//                 address: document.getElementById('main_address').value,
//                 main_address_country: document.getElementById('main_address_country').value,
//                 company_name: document.getElementById('company_name').value,
//                 parent_id: document.getElementById('parent_id').value,
//                 comp_email: document.getElementById('comp_email').value,
//                 city: 'Default City',
//                 state: 'Default State',
//                 zip: document.getElementById('main_address_pin_code').value,
//                 planId: planID,
//                 billingCycle: 'daily',
//                 memberCount: memberCount,
//                 register_password: document.getElementById('register_password').value,
//                 register_confirm_password: document.getElementById('register_confirm_password').value,
//                 user_country: document.getElementById('user_country').value,
//                 user_state: document.getElementById('user_state').value,
//             };

//             const response = await axios.post('/auth/createexternalSubscription', formData);
//             const { subscription, amount } = response.data;

//             formData.subscriptionId = subscription.id;

//             const options = {
//                 key: razorpay_key,
//                 //key: 'rzp_test_ivrp5LlA1gQXAT',
//                 subscription_id: subscription.id,
//                 name: 'Subscription Payment',
//                 description: `Subscription Payment: ₹${(amount / 100).toFixed(2)}`, // Display amount in rupees
//                 amount: amount, // Amount in paise
//                 handler: function (response) {
//                     Swal.fire({
//                         icon: 'success',
//                         title: 'Payment Successful!',
//                         text: 'Your payment was successful.',
//                         confirmButtonText: 'OK'
//                     }).then(() => {
//                         // Post payment success, create user and company
//                         createUserAndCompany(formData);
//                     });
//                 },
//                 prefill: {
//                     name: formData.name,
//                     email: formData.email
//                 },
//                 theme: {
//                     color: '#F37254'
//                 }
//             };

//             // Open Razorpay Checkout
//             const rzp = new Razorpay(options);
//             rzp.open();

//             rzp.on('payment.failed', function (response) {
//                 Swal.fire({
//                     icon: 'error',
//                     title: 'Payment Error',
//                     text: response.error.description || 'Unknown error occurred.',
//                     confirmButtonText: 'OK'
//                 });
//             });
//         } catch (error) {
//             console.error('Error initiating payment:', error);
//             let errorMessage = 'Failed to initiate payment. Please try again later.';

//             if (error.response) {
//                 errorMessage = error.response.data.message || errorMessage;
//             } else if (error.message) {
//                 errorMessage = error.message;
//             }

//             Swal.fire({
//                 icon: 'error',
//                 title: 'Payment Initiation Failed',
//                 text: errorMessage,
//                 confirmButtonText: 'OK'
//             });
//         }
//     }
// }



        async function createUserAndCompany(formData) {
            try {
                console.log("externalRegistrationformData", formData);
                const response = await axios.post('/auth/externalRegistration', formData);
                if (response.data.status === 'ok') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: response.data.message || 'User and company created successfully.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/business';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.data.message || 'Failed to create user and company. Please try again later.',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error creating user and company:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.response.data.message || 'Failed to create user and company. Please try again later.',
                    confirmButtonText: 'OK'
                });
            }
        }



        document.getElementById('email').addEventListener('blur', async function () {
            const email = this.value.trim();
            if (email) {
                try {
                    const response = await axios.get(`/checkEmailAvailability?email=${email}`);
                    if (!response.data.available) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Email Already Exists',
                            text: 'This email is already registered. Please use a different email address.',
                            confirmButtonText: 'OK'
                        });
                    }
                } catch (error) {
                    console.error('Error checking email availability:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.response.data.message || 'Failed to check email availability. Please try again later.',
                        confirmButtonText: 'OK'
                    });
                }
            }
        });

        document.getElementById('user_country').addEventListener('change', async function () {
            const countryCode = this.value;
            const stateDropdown = document.getElementById('user_state');
            stateDropdown.innerHTML = '<option value="">Select a state</option>';

            if (countryCode) {
                try {
                    const response = await axios.get(`/getStatesbycountryid?country=${countryCode}`);
                    const states = response.data;

                    states.forEach(state => {
                        const option = document.createElement('option');
                        option.value = state.id;
                        option.textContent = state.name;
                        stateDropdown.appendChild(option);
                    });
                } catch (error) {
                    console.error('Error fetching states:', error);
                    // alert('Failed to load states. Please try again.');
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to load states',
                        text: 'Please try again.'
                    });
                }
            }
        });

        document.getElementById('main_address_pin_code').addEventListener('input', function (e) {
            const value = e.target.value;
            if (value.length > 6) {
                e.target.value = value.slice(0, 6);
            }
        });

        document.getElementById('main_address_pin_code').addEventListener('blur', function (e) {
            const value = e.target.value;
            if (value.length !== 6) {
                // alert('Pincode Code must be exactly 6 digits.');
                Swal.fire({
                    icon: 'error',
                    // title: 'Failed to load states',
                    text: 'Pincode Code must be exactly 6 digits.'
                });
                //e.target.focus();
            }
        });
        document.getElementById('register_password').addEventListener('blur', function (e) {
            const value = e.target.value;
            if (value.length < 8 || value.length > 30) {
                //alert('Password must be between 8 and 30 characters.');
                Swal.fire({
                    icon: 'error',
                    // title: 'Failed to load states',
                    text: 'Password must be between 8 and 30 characters.'
                });
                //e.target.focus();
            }
        });
        
    
        document.getElementById('register_confirm_password').addEventListener('blur', function (e) {
            const value = e.target.value;
            if (value.length < 8 || value.length > 30) {
                //alert('Password must be between 8 and 30 characters.');
                Swal.fire({
                    icon: 'error',
                    // title: 'Failed to load states',
                    text: 'Password must be between 8 and 30 characters.'
                });
                //e.target.focus();
            }
        });
        
        document.getElementById('comp_email').addEventListener('blur', function () {
            if (!this.checkValidity()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Email',
                    text: 'Please enter a valid email address.',
                    confirmButtonText: 'OK'
                });
                //this.focus();
            }
        });
        document.getElementById('email').addEventListener('blur', function () {
            if (!this.checkValidity()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Email',
                    text: 'Please enter a valid email address.',
                    confirmButtonText: 'OK'
                });
                //this.focus();
            }
        });
        document.getElementById('comp_phone').addEventListener('input', function (e) {
            const value = e.target.value;
            if (value.length > 6) {
                e.target.value = value.slice(0, 10);
            }
        });
        
    </script>




    <!-- <script>
        let currentStep = 1;

        function showStep(step) {
            document.querySelectorAll('.form-step').forEach((el, index) => {
                el.classList.remove('active');
                if (index + 1 === step) {
                    el.classList.add('active');
                }
            });

            document.querySelectorAll('.formbold-step-menu1, .formbold-step-menu2, .formbold-step-menu3').forEach((el, index) => {
                el.classList.remove('active');
                if (index + 1 === step) {
                    el.classList.add('active');
                }
            });
        }

        function nextStep() {
            if (validateStep(currentStep)) {
                currentStep++;
                showStep(currentStep);
            }
        }

        function prevStep() {
            currentStep--;
            showStep(currentStep);
        }
        async function handleConfirmation(confirmed) {
            if (confirmed) {
                try {
                    const formData = {
                        name: document.getElementById('first_name').value + ' ' + document.getElementById('last_name').value,
                        first_name: document.getElementById('first_name').value,
                        last_name: document.getElementById('last_name').value,
                        email: document.getElementById('email').value,
                        address: document.getElementById('main_address').value,
                        main_address_country: document.getElementById('main_address_country').value,
                        company_name: document.getElementById('company_name').value,
                        parent_id: document.getElementById('parent_id').value,
                        comp_email: document.getElementById('comp_email').value,
                        city: 'Default City',
                        state: 'Default State',
                        zip: document.getElementById('main_address_pin_code').value,
                        planId: '<%= planID %>',
                        billingCycle: 'daily',
                        memberCount: '<%= memberCount %>',
                        register_password: document.getElementById('register_password').value,
                        register_confirm_password: document.getElementById('register_confirm_password').value,
                        user_country:  document.getElementById('user_country').value,
                        user_state:  document.getElementById('user_state').value,
                    };

                    const response = await axios.post('/auth/createexternalSubscription', formData);
                    const { subscription, amount } = response.data;

                    formData.subscriptionId = subscription.id;

                    const options = {
                        key: 'rzp_test_FUBQq7lujicpGo',
                        subscription_id: subscription.id,
                        name: 'Subscription Payment',
                        description: `Subscription Payment: ₹${(amount / 100).toFixed(2)}`, // Display amount in rupees
                        amount: amount, // Amount in paise
                        handler: function (response) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Payment Successful!',
                                text: 'Your payment was successful.',
                                confirmButtonText: 'OK'
                            }).then(() => {
                                // Post payment success, create user and company
                                createUserAndCompany(formData);
                            });
                        },
                        prefill: {
                            name: formData.name,
                            email: formData.email
                        },
                        theme: {
                            color: '#F37254'
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();

                    rzp.on('payment.failed', function (response) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Error',
                            text: response.error.description || 'Unknown error occurred.',
                            confirmButtonText: 'OK'
                        });
                    });
                } catch (error) {
                    console.error('Error initiating payment:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Initiation Failed',
                        text: 'Failed to initiate payment. Please try again later.',
                        confirmButtonText: 'OK'
                    });
                }
            }
        }

        function validateStep(step) {
            // Implement validation for each step here
            return true;
        }


        async function createUserAndCompany(formData) {
            try {
                console.log("externalRegistrationformData", formData);
                const response = await axios.post('/auth/externalRegistration', formData);
                if (response.data.status === 'ok') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: response.data.message || 'User and company created successfully.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/business';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.data.message || 'Failed to create user and company. Please try again later.',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error creating user and company:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.response.data.message || 'Failed to create user and company. Please try again later.',
                    confirmButtonText: 'OK'
                });
            }
        }

        // document.getElementById('user_country').addEventListener('change', async function() {
		// 		const countryCode = this.value;
		// 		const stateDropdown = document.getElementById('user_state');
		// 		stateDropdown.innerHTML = '<option value="">Select a state</option>';
	
		// 		if (countryCode) {
		// 			try {
		// 				const response = await axios.get(`/getStates?country=${countryCode}`);
		// 				const states = response.data;
	
		// 				states.forEach(state => {
		// 					const option = document.createElement('option');
		// 					option.value = state.name;
		// 					option.textContent = state.name;
		// 					stateDropdown.appendChild(option);
		// 				});
		// 			} catch (error) {
		// 				console.error('Error fetching states:', error);
		// 				alert('Failed to load states. Please try again.');
		// 			}
		// 		}
		// 	});
	

            document.getElementById('user_country').addEventListener('change', async function() {
				const countryCode = this.value;
				const stateDropdown = document.getElementById('user_state');
				stateDropdown.innerHTML = '<option value="">Select a state</option>';
	
				if (countryCode) {
					try {
						const response = await axios.get(`/getStatesbycountryid?country=${countryCode}`);
						const states = response.data;
	
						states.forEach(state => {
							const option = document.createElement('option');
							option.value = state.id;
							option.textContent = state.name;
							stateDropdown.appendChild(option);
						});
					} catch (error) {
						console.error('Error fetching states:', error);
						alert('Failed to load states. Please try again.');
					}
				}
			});
	
            
            

            
    </script> -->

    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@100;300;400;500;600&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: "Inter", sans-serif;
        }

        .formbold-main-wrapper {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 48px;
        }

        .formbold-form-wrapper {
            margin: 0 auto;
            max-width: 550px;
            width: 100%;
            background: white;
        }

        .formbold-steps {
            padding-bottom: 18px;
            margin-bottom: 35px;
            border-bottom: 1px solid #DDE3EC;
        }

        .formbold-steps ul {
            padding: 0;
            margin: 0;
            list-style: none;
            display: flex;
            gap: 40px;
        }

        .formbold-steps li {
            display: flex;
            align-items: center;
            gap: 14px;
            font-weight: 500;
            font-size: 16px;
            line-height: 24px;
            color: #536387;
        }

        .formbold-steps li span {
            display: flex;
            align-items: center;
            justify-content: center;
            background: #DDE3EC;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            font-weight: 500;
            font-size: 16px;
            line-height: 24px;
            color: #536387;
        }

        .formbold-steps li.active {
            color: #07074D;
            ;
        }

        .formbold-steps li.active span {
            background: #6A64F1;
            color: #FFFFFF;
        }

        .formbold-input-flex {
            display: flex;
            gap: 20px;
            margin-bottom: 22px;
        }

        .formbold-input-flex>div {
            width: 50%;
        }

        .formbold-form-input {
            width: 100%;
            padding: 13px 22px;
            border-radius: 5px;
            border: 1px solid #DDE3EC;
            background: #FFFFFF;
            font-weight: 500;
            font-size: 16px;
            color: #536387;
            outline: none;
            resize: none;
        }

        .formbold-form-input:focus {
            border-color: #6a64f1;
            box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.05);
        }

        .formbold-form-label {
            color: #07074D;
            font-weight: 500;
            font-size: 14px;
            line-height: 24px;
            display: block;
            margin-bottom: 10px;
        }

        .formbold-form-confirm {
            border-bottom: 1px solid #DDE3EC;
            padding-bottom: 35px;
        }

        .formbold-form-confirm p {
            font-size: 16px;
            line-height: 24px;
            color: #536387;
            margin-bottom: 22px;
            width: 75%;
        }

        .formbold-form-confirm>div {
            display: flex;
            gap: 15px;
        }

        .formbold-confirm-btn {
            display: flex;
            align-items: center;
            gap: 10px;
            background: #FFFFFF;
            border: 0.5px solid #DDE3EC;
            border-radius: 5px;
            font-size: 16px;
            line-height: 24px;
            color: #536387;
            cursor: pointer;
            padding: 10px 20px;
            transition: all .3s ease-in-out;
        }

        .formbold-confirm-btn {
            box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.12);
        }

        .formbold-confirm-btn.active {
            background: #6A64F1;
            color: #FFFFFF;
        }

        .formbold-form-step-1,
        .formbold-form-step-2,
        .formbold-form-step-3 {
            display: none;
        }

        .formbold-form-step-1.active,
        .formbold-form-step-2.active,
        .formbold-form-step-3.active {
            display: block;
        }

        .formbold-form-btn-wrapper {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            gap: 25px;
            margin-top: 25px;
        }

        .formbold-back-btn {
            cursor: pointer;
            background: #FFFFFF;
            border: none;
            color: #07074D;
            font-weight: 500;
            font-size: 16px;
            line-height: 24px;
            /* display: none; */
        }

        .formbold-back-btn.active {
            display: block;
        }

        .formbold-btn {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 16px;
            border-radius: 5px;
            padding: 10px 25px;
            border: none;
            font-weight: 500;
            background-color: #6A64F1;
            color: white;
            cursor: pointer;
        }

        .formbold-btn:hover {
            box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.05);
        }
    </style>

</body>

</html>