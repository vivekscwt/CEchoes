<%- include('common/header') -%>
   <link href="/front-end/css/business-style.css" rel="stylesheet" type="text/css">
   <%- include('common/header-banner') -%>
	<div class="container">

		<div class="row">
			<div class="col">
				<h3 class="title">Amount</h3>
				<div id="amountDisplay">
					<p>Total Amount: <span id="amount">$0.00</span></p>
				</div>
			</div>

			<div class="col">
				<form id="paymentForm">
					<!-- Stripe Card Number Element Container -->
					<div class="card-element-container">
						<label for="card-number">Card Number:</label>
						<div id="card-number"></div>
					</div>
				
					<!-- Stripe Expiration Date Element Container -->
					<div class="card-element-container">
						<label for="card-expiry">Expiration Date:</label>
						<div id="card-expiry"></div>
					</div>
				
					<!-- Stripe CVV Element Container -->
					<div class="card-element-container">
						<label for="card-cvc">CVV:</label>
						<div id="card-cvc"></div>
					</div>
				
					<!-- Other Billing Address fields -->
					<div class="billing-address">
						<h3 class="title">Billing Address</h3>
						<div class="inputBox">
							<label for="memberCount">Add-on Users:</label>
							<input type="number" min=1 name="memberCount" id="memberCount"
								placeholder="Enter number of add-on users">
						</div>
				
						<div class="inputBox">
							<label for="name">Full Name:</label>
							<input type="text" id="name" placeholder="Enter your full name" required>
						</div>
				
						<div class="inputBox">
							<label for="address">Address:</label>
							<input type="text" id="address" placeholder="Enter address" required>
						</div>
				
						<div class="inputBox">
							<label for="city">City:</label>
							<input type="text" id="city" placeholder="Enter city" required>
						</div>
				
						<div class="inputBox">
							<label for="state">State:</label>
							<input type="text" id="state" placeholder="Enter state" required>
						</div>
				
						<div class="inputBox">
							<label for="zip">Zip Code:</label>
							<input type="number" id="zip" placeholder="123 456" required>
						</div>
					</div>
					
					<button type="submit" value="Proceed to Checkout" class="submit_btn">Proceed to Checkout</button>
					<div id="error-message"></div>
				</form>
				
				
				
			</div>
		</div>
	</div>
	
	<script type="text/javascript" src="index.js"></script>



<style>
	@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@100;300;400;500;600&display=swap');

	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		border: none;
		outline: none;
		font-family: 'Poppins', sans-serif;
		text-transform: capitalize;
		transition: all 0.2s linear;
	}
	.container .row>*:nth-child(1) {
		border: 3px solid black !important;
		padding: 12px;
		max-width: 700px;
    	margin: 0 auto 25px;
		background-color: #ffc107 !important;
	}
	#paymentForm .row .col{
		background-color: white !important;
		border: none !important;
		border-radius: 5px;
	}
	#paymentForm .row .col .title{
		margin-bottom: 20px;
	}
	.login-modal,.modal{
		display: none;
	}
	.container {
		display: block;
		padding: 25px;
		background: #fff;
	}
	.inner-page-heading {
		padding: 47px 0 0px;
		border-bottom: 1px #ACACAC solid;
	}
	.container form {
		max-width: 700px;
		margin: 0 auto;
		padding: 20px;
		background: #fff;
		box-shadow: 5px 5px 30px rgba(0, 0, 0, 0.2);
		border-radius: 5px;
	}
	.col .title,.col #amountDisplays{
		max-width: 700px;
		margin: 0 auto;
	}
	.container .row>* {
		margin-bottom: 25px;
		border: none !important;
		background-color: white !important;
		border-radius: 5px;
	}

	.container form .row {
		display: flex;
		flex-wrap: wrap;
		gap: 15px;
	}

	.container form .row .col {
		flex: 1 1 250px;
	}

	.col .title {
		font-size: 20px;
		color: #ffc107;
		padding-bottom: 5px;
		font-weight: 600;
	}
	
	.container .row>*:nth-child(1) .title{
		color: black !important;
	}
	.col .inputBox {
		margin-bottom: 25px;
	}

	.col .inputBox label {
		margin-bottom: 10px;
		display: block;
	}

	.col .inputBox input,
	.col .inputBox select {
		width: 100%;
		padding: 13px 22px;
		border-radius: 5px;
		border: 1px solid #ffc107;
	}

	.col .inputBox input:focus,
	.col .inputBox select:focus {
		border: 1px solid #000;
	}

	.col .flex {
		display: flex;
		gap: 15px;
	}

	.col .flex .inputBox {
		flex: 1 1;
		margin-top: 5px;
	}

	.col .inputBox img {
		height: 34px;
		margin-top: 5px;
		filter: drop-shadow(0 0 1px #000);
	}

	.container form .submit_btn {
		width: 100%;
		padding: 12px;
		font-size: 17px;
		background:black;
		color: #ffc107;
		cursor: pointer;
		letter-spacing: 1px;
		max-width: 250px;
		font-weight: 600;
		margin: 0 auto;
		display: block;
		border-radius: 5px;
		border: 2px solid #ffc107;
	}

	.container form .submit_btn:hover {
		background: #ffc107;
		color: rgb(3, 3, 3);
		border: 2px solid black;
	}

	input::-webkit-inner-spin-button,
	input::-webkit-outer-spin-button {
		display: none;
	}
	header.main_header .container {
		display: block;
    	min-height: auto;
		background-color: black;
}

	input::-webkit-inner-spin-button,
	input::-webkit-outer-spin-button {
		display: none;
	}

	#card-element {
    display: flex;
    flex-direction: column; /* Stack items vertically */
    gap: 15px; /* Space between fields */
}

.card-element-container {
    display: flex;
    flex-direction: column;
}

.card-element-container label {
    margin-bottom: 5px;
}

.card-element-container div {
    border: 1px solid #ced4da;
    border-radius: 4px;
    padding: 12px;
    background-color: #ffffff;
}

.billing-address {
    margin-bottom: 20px;
}

.inputBox {
    margin-bottom: 15px;
}

.inputBox label {
    display: block;
    margin-bottom: 5px;
}

.inputBox input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
}

.submit_btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    background-color: #007bff;
    color: #ffffff;
    font-size: 16px;
    cursor: pointer;
}

#error-message {
    color: #fa755a;
    margin-top: 10px;
}


</style>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://js.stripe.com/v3/"></script>


<script>
document.addEventListener('DOMContentLoaded', function() {
    const stripe = Stripe('pk_test_51Pmx4bE9RgUxhHlihWvQ6tCKKz2AeuVE4X2fBtEFHHnKTu4mgcFHPF1rpYDjwgn0vxlCfPEbiQTLy6JBelzwiTJw00p4tIO4NZ');
    const elements = stripe.elements();

    // Create and mount the card number Element
    const cardNumber = elements.create('cardNumber', {
        style: {
            base: {
                fontSize: '16px',
                color: '#32325d',
                '::placeholder': {
                    color: '#aab7c4',
                },
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a',
            },
        },
    });

    const cardExpiry = elements.create('cardExpiry', {
        style: {
            base: {
                fontSize: '16px',
                color: '#32325d',
                '::placeholder': {
                    color: '#aab7c4',
                },
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a',
            },
        },
    });

    const cardCvc = elements.create('cardCvc', {
        style: {
            base: {
                fontSize: '16px',
                color: '#32325d',
                '::placeholder': {
                    color: '#aab7c4',
                },
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a',
            },
        },
    });

    cardNumber.mount('#card-number');
    cardExpiry.mount('#card-expiry');
    cardCvc.mount('#card-cvc');

    const errorMessage = document.getElementById('error-message');
    cardNumber.on('change', handleCardChange);
    cardExpiry.on('change', handleCardChange);
    cardCvc.on('change', handleCardChange);

    function handleCardChange(event) {
        if (event.error) {
            errorMessage.textContent = event.error.message;
        } else {
            errorMessage.textContent = '';
        }
    }

    document.getElementById('paymentForm').addEventListener('submit', async function(event) {
        event.preventDefault();
        document.querySelector('button').disabled = true;

        const { token, error } = await stripe.createToken(cardNumber);
        console.log("Token:", token);

        if (error) {
            errorMessage.textContent = error.message;
            document.querySelector('button').disabled = false;
        } else {
            await stripeTokenHandler(token);
        }
    });
	var addonUsersCount = document.getElementById('memberCount').value;
	console.log('Add-on Users Count:', addonUsersCount);

    async function stripeTokenHandler(token) {
        const formData = {
            token: token.id,
            userId: '<%= currentUserData.user_id %>',
            name: document.getElementById('name').value,
            email: '<%= currentUserData.email %>',
            address: document.getElementById('address').value,
            city: document.getElementById('city').value,
            state: document.getElementById('state').value,
            zip: document.getElementById('zip').value,
            planId: '<%= planID %>',          
			billingCycle: 'yearly',
            memberCount: '<%= memberCount %>',
			// memberCount: addonUsersCount
        };

        try {
            const response = await fetch('/auth/create-subscription', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData),
            });

            const data = await response.json();
            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Payment Successful!',
                    text: data.message,
                    confirmButtonText: 'OK',
                }).then(() => {
                    window.location.href = '/business';
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Error',
                    text: data.error ? data.error.message : 'There was an error processing your payment. Please try again later.',
                    confirmButtonText: 'OK',
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Payment Error',
                text: 'There was an error processing your payment. Please try again later.',
                confirmButtonText: 'OK',
            });
        } finally {
            document.querySelector('button').disabled = false;
        }
    }
});

	document.addEventListener('DOMContentLoaded', function() {

		const zipInput = document.getElementById('zip');
		if (zipInput) {
			zipInput.addEventListener('input', function() {
				const maxLength = 6;
				if (zipInput.value.length > maxLength) {
					zipInput.value = zipInput.value.slice(0, maxLength);
				}
			});
		}

		// Limit CVV code length
		const cvvInput = document.getElementById('cvv');
		if (cvvInput) {
			cvvInput.addEventListener('input', function() {
				const maxLength = 3;
				if (cvvInput.value.length > maxLength) {
					cvvInput.value = cvvInput.value.slice(0, maxLength);
				}
			});
		}

		// Populate expiration year dropdown
		const selectYear = document.getElementById('expYear');
		if (selectYear) {
			const currentYear = new Date().getFullYear();
			const futureYearsCount = 20;
			for (let i = 0; i <= futureYearsCount; i++) {
				const year = currentYear + i;
				const option = document.createElement('option');
				option.textContent = year;
				option.value = year;
				selectYear.appendChild(option);
			}
		}
	});
	let countryCode = '<%= country_code %>';
	//console.log("country_code", countryCode);
	const exchangeRates = '<%- JSON.stringify(exchangeRates) %>';
	console.log("Exchange Rates:", exchangeRates);

	document.addEventListener('DOMContentLoaded', function () {
		function getQueryParams() {
			const params = {};
			const queryString = window.location.search.substring(1);
			const queries = queryString.split('&');
			queries.forEach(function (query) {
				const [key, value] = query.split('=');
				params[decodeURIComponent(key)] = decodeURIComponent(value);
			});
			return params;
		}

		async function convertToUSD(totalPrice, countryCode) {
			try {
				let convertedPrice;

				if (countryCode === 'IN' && exchangeRates['INR']) {
					convertedPrice = totalPrice / exchangeRates['INR'];
				} else if (countryCode === 'JP' && exchangeRates['JPY']) {
					convertedPrice = totalPrice / exchangeRates['JPY'];
				} else {
					console.log('Unsupported country code or missing exchange rate:', countryCode);
					return totalPrice;
				}

				return convertedPrice.toFixed(2);
			} catch (error) {
				console.error('Error converting price:', error.message);
				return totalPrice;
			}
		}

		const queryParams = getQueryParams();
		const totalPrice = parseFloat(queryParams['total_price']);
		const countryCode = '<%= country_code %>'; 

		const amountElement = document.getElementById('amount');

		if (isNaN(totalPrice)) {
			console.log('Invalid total price:', queryParams['total_price']);
			amountElement.textContent = '0.00';
			return;
		}

		convertToUSD(totalPrice, countryCode)
			.then(convertedPrice => {
				if (!isNaN(convertedPrice)) {
					amountElement.textContent = '$' + convertedPrice;
					console.log('Converted Total Price to USD:', convertedPrice);
				} else {
					amountElement.textContent = '0.00';
					console.log('Failed to convert total price to USD.');
				}
			})
			.catch(error => {
				console.error('Error converting total price to USD:', error.message);
				amountElement.textContent = '0.00';
			});

		console.log('Query Params:', queryParams);
		console.log('Total Price:', totalPrice);
	});


</script>






<!-- <script>

	let cardNumInput =
		document.querySelector('#cardNum')

	cardNumInput.addEventListener('keyup', () => {
		let cNumber = cardNumInput.value
		cNumber = cNumber.replace(/\s/g, "")

		if (Number(cNumber)) {
			cNumber = cNumber.match(/.{1,4}/g)
			cNumber = cNumber.join(" ")
			cardNumInput.value = cNumber
		}
	})
	let planid = '<%= planID%>'
	console.log("planid", planid);
	let user_email = '<%= currentUserData.email%>'
	console.log("user_email", user_email);
	let user_id = '<%= currentUserData.user_id%>'
	console.log("user_id", user_id);
	let memberval = '<%= memberCount%>'
	console.log("memberval", memberval);

//     document.addEventListener('DOMContentLoaded', function () {
//         // Initialize Stripe with your public key
//         const stripe = Stripe('pk_test_0jpk_test_51Pmx4bE9RgUxhHlihWvQ6tCKKz2AeuVE4X2fBtEFHHnKTu4mgcFHPF1rpYDjwgn0vxlCfPEbiQTLy6JBelzwiTJw00p4tIO4NZK4WJkOCbxKTGwExCy11A5R');
//         const elements = stripe.elements();
//         const card = elements.create('card');
//         card.mount('#cardElement');

//         card.addEventListener('change', function (event) {
//             const displayError = document.getElementById('error-message');
//             if (event.error) {
//                 displayError.textContent = event.error.message;
//             } else {
//                 displayError.textContent = '';
//             }
//         });

// 	document.getElementById('paymentForm').addEventListener('submit', async function (event) {
// 		event.preventDefault();

// 		const formData = {
// 			token: token.id,
// 			userId: user_id,
// 			name: document.getElementById('name').value,
// 			email: user_email,
// 			address: document.getElementById('address').value,
// 			city: document.getElementById('city').value,
// 			state: document.getElementById('state').value,
// 			zip: document.getElementById('zip').value,
// 			cardName: document.getElementById('cardName').value,
// 			cardNum: document.getElementById('cardNum').value,
// 			expMonth: document.getElementById('expMonth').value,
// 			expYear: document.getElementById('expYear').value,
// 			cvv: document.getElementById('cvv').value,
// 			planId: planid,
// 			billingCycle: 'monthly',
// 			//billingCycle: 'daily',
// 			memberCount: memberval
// 		};
// 		console.log("Name:", formData.name);
// 		console.log("Email:", formData.email);
// 		console.log("Address:", formData.address);
// 		console.log("City:", formData.city);
// 		console.log("State:", formData.state);
// 		console.log("ZIP:", formData.zip);
// 		console.log("Card Name:", formData.cardName);
// 		console.log("Card Number:", formData.cardNum);
// 		console.log("Expiration Month:", formData.expMonth);
// 		console.log("Expiration Year:", formData.expYear);
// 		console.log("CVV:", formData.cvv);
// 		console.log("Plan ID:", formData.planId);
// 		console.log("Billing Cycle:", formData.billingCycle);
// 		console.log("Member Count:", formData.memberCount);


// 		const response = await fetch('/auth/create-subscription', {
// 			method: 'POST',
// 			headers: {
// 				'Content-Type': 'application/json'
// 			},
// 			body: JSON.stringify(formData)
// 		});

// 		const data = await response.json();
// 		console.log(data);

// 		if (response.ok) {
// 			Swal.fire({
// 				icon: 'success',
// 				title: 'Payment Successful!',
// 				text: data.message,
// 				confirmButtonText: 'OK'
// 			}).then(() => {
// 				//window.location.href = '/business';
// 			});
// 		} else {
// 			const errorMessage = data.error ? data.error.message : 'There was an error processing your payment. Please try again later.';
// 			console.log("errorMessage", errorMessage);

// 			Swal.fire({
// 				icon: 'error',
// 				title: 'Payment Error',
// 				text: data.error,
// 				confirmButtonText: 'OK'
// 			});
// 		}
// 	});
// })
	


document.addEventListener('DOMContentLoaded', function () {
        // Initialize Stripe with your public key
        const stripe = Stripe('pk_test_0jpk_test_51Pmx4bE9RgUxhHlihWvQ6tCKKz2AeuVE4X2fBtEFHHnKTu4mgcFHPF1rpYDjwgn0vxlCfPEbiQTLy6JBelzwiTJw00p4tIO4NZK4WJkOCbxKTGwExCy11A5R');
        const elements = stripe.elements();
        const card = elements.create('card');
        card.mount('#cardElement');

        card.addEventListener('change', function (event) {
            const displayError = document.getElementById('error-message');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        document.getElementById('paymentForm').addEventListener('submit', async function (event) {
            event.preventDefault();
            const {token, error} = await stripe.createToken(card);
            if (error) {
                console.error('Error creating token:', error);
                document.getElementById('error-message').textContent = error.message;
            } else {
                const formData = {
                    token: token.id,
                    userId: user_id,
                    name: document.getElementById('name').value,
                    email: user_email,
                    address: document.getElementById('address').value,
                    city: document.getElementById('city').value,
                    state: document.getElementById('state').value,
                    zip: document.getElementById('zip').value,
                    cardName: document.getElementById('cardName').value,
                    cardNum: document.getElementById('cardNum').value,
                    expMonth: document.getElementById('expMonth').value,
                    expYear: document.getElementById('expYear').value,
                    cvv: document.getElementById('cvv').value,
                    planId: planid,
                    billingCycle: 'monthly',
                    //billingCycle: 'daily',
                    memberCount: memberval
                };
                console.log("Name:", formData.name);
                console.log("Email:", formData.email);
                console.log("Address:", formData.address);
                console.log("City:", formData.city);
                console.log("State:", formData.state);
                console.log("ZIP:", formData.zip);
                console.log("Card Name:", formData.cardName);
                console.log("Card Number:", formData.cardNum);
                console.log("Expiration Month:", formData.expMonth);
                console.log("Expiration Year:", formData.expYear);
                console.log("CVV:", formData.cvv);
                console.log("Plan ID:", formData.planId);
                console.log("Billing Cycle:", formData.billingCycle);
                console.log("Member Count:", formData.memberCount);

                const response = await fetch('/auth/create-subscription', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();
                if (response.ok) {
                    alert('Payment Successful!');
                } else {
                    alert('Payment Error: ' + data.error);
                }
            }
        });
    });

	document.addEventListener('DOMContentLoaded', function () {
		const zipInput = document.getElementById('zip');

		zipInput.addEventListener('input', function () {
			const maxLength = 6;
			if (zipInput.value.length > maxLength) {
				zipInput.value = zipInput.value.slice(0, maxLength);
			}
		});

		const cvvInput = document.getElementById('cvv');

		cvvInput.addEventListener('input', function () {
			const maxLength = 3;
			if (cvvInput.value.length > maxLength) {
				cvvInput.value = cvvInput.value.slice(0, maxLength);
			}
		});

		const selectYear = document.getElementById('expYear');
		const currentYear = new Date().getFullYear();
		const futureYearsCount = 20;

		for (let i = 0; i <= futureYearsCount; i++) {
			const year = currentYear + i;
			const option = document.createElement('option');
			option.textContent = year;
			option.value = year;
			selectYear.appendChild(option);
		}

	});

	let countryCode = '<%= country_code %>';
	//console.log("country_code", countryCode);
	const exchangeRates = '<%- JSON.stringify(exchangeRates) %>';
	console.log("Exchange Rates:", exchangeRates);
	document.addEventListener('DOMContentLoaded', function () {
		function getQueryParams() {
			const params = {};
			const queryString = window.location.search.substring(1);
			const queries = queryString.split('&');
			queries.forEach(function (query) {
				const [key, value] = query.split('=');
				params[decodeURIComponent(key)] = decodeURIComponent(value);
			});
			return params;
		}

		async function convertToUSD(totalPrice, countryCode) {
			try {
				let convertedPrice;

				if (countryCode === 'IN') {
					convertedPrice = totalPrice / parseFloat(exchangeRates['INR']);
				} else if (countryCode === 'JP') {
					convertedPrice = totalPrice / parseFloat(exchangeRates['JPY']);
				} else {
					console.log('Unsupported country code:', countryCode);
					return totalPrice;
				}

				return convertedPrice.toFixed(2);
			} catch (error) {
				console.error('Error converting price:', error.message);
				return totalPrice;
			}
		}

		const queryParams = getQueryParams();
		const totalPrice = parseFloat(queryParams['total_price']);
		const countryCode = '<%= country_code %>';

		const amountElement = document.getElementById('amount');

		if (!isNaN(totalPrice)) {
			convertToUSD(totalPrice, countryCode)
				.then(convertedPrice => {
					if (!isNaN(convertedPrice)) {
						amountElement.textContent = '$' + convertedPrice;
						console.log('Converted Total Price to USD:', convertedPrice);
					} else {
						amountElement.textContent = '0.00';
						console.log('Failed to convert total price to USD.');
					}
				})
				.catch(error => {
					console.error('Error converting total price to USD:', error.message);
					amountElement.textContent = '0.00';
				});
		} else {
			amountElement.textContent = '0.00';
			console.log('Invalid total price:', queryParams['total_price']);
		}

		console.log('Query Params:', queryParams);
		console.log('Total Price:', totalPrice);
	});

</script> -->




