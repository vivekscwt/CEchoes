<%- include('common/header') -%>
    <!--begin::Content-->
    <div class="content d-flex flex-column flex-column-fluid" id="kt_content">
        <!--begin::Toolbar-->
        <div class="toolbar" id="kt_toolbar">
            <!--begin::Container-->
            <div id="kt_toolbar_container" class="container-fluid d-flex flex-stack">
                <!--begin::Page title-->
                <div data-kt-swapper="true" data-kt-swapper-mode="prepend"
                    data-kt-swapper-parent="{default: '#kt_content_container', 'lg' : '#kt_toolbar_container'}"
                    class="page-title d-flex align-items-center flex-wrap me-3 mb-5 mb-lg-0">
                    <!--begin::Title-->
                    <h1 class="d-flex align-items-center text-dark fw-bolder fs-3 my-1">
                        <%= page_title %>
                            <!--end::Description-->
                    </h1>
                    <!--end::Title-->
                </div>
                <!--end::Page title-->
            </div>
            <!--end::Container-->
        </div>
        <!--end::Toolbar-->
        <!--begin::Post-->
        <div class="post d-flex flex-column-fluid" id="kt_post">
            <!--b egin::Container-->
            <div id="kt_content_container" class="container-xxl">
                <!--begin::Card-->
                <div class="card">
                    <!--begin::Card header-->
                    <div class="card-header border-0 pt-6">
                        <!--begin::Card title-->
                        <div class="card-title">
                            <!--begin::Search-->
                            <div class="d-flex align-items-center position-relative my-1">
                                <!--begin::Svg Icon | path: icons/duotune/general/gen021.svg-->
                                <span class="svg-icon svg-icon-1 position-absolute ms-6">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none">
                                        <rect opacity="0.5" x="17.0365" y="15.1223" width="8.15546" height="2" rx="1"
                                            transform="rotate(45 17.0365 15.1223)" fill="black" />
                                        <path
                                            d="M11 19C6.55556 19 3 15.4444 3 11C3 6.55556 6.55556 3 11 3C15.4444 3 19 6.55556 19 11C19 15.4444 15.4444 19 11 19ZM11 5C7.53333 5 5 7.53333 5 11C5 14.4667 7.53333 17 11 17C14.4667 17 17 14.4667 17 11C17 7.53333 14.4667 5 11 5Z"
                                            fill="black" />
                                    </svg>
                                </span>
                                <!--end::Svg Icon-->
                                <input type="text" data-kt-user-table-filter="search"
                                    class="form-control form-control-solid w-250px ps-14"
                                    placeholder="Search Company" />
                            </div>
                            <!--end::Search-->
                        </div>
                        <!--begin::Card title-->
                        <!--begin::Card toolbar-->
                        <div class="card-toolbar">
                            <!--begin::Toolbar-->
                            <div class="d-flex justify-content-end" data-kt-user-table-toolbar="base">
                                <%# <!--begin::Filter-->
                                    <button type="button" class="btn btn-light-primary me-3"
                                        data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end"
                                        data-kt-menu-flip="top-end">
                                        <!--begin::Svg Icon | path: icons/duotune/general/gen031.svg-->
                                        <span class="svg-icon svg-icon-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                                viewBox="0 0 24 24" fill="none">
                                                <path
                                                    d="M19.0759 3H4.72777C3.95892 3 3.47768 3.83148 3.86067 4.49814L8.56967 12.6949C9.17923 13.7559 9.5 14.9582 9.5 16.1819V19.5072C9.5 20.2189 10.2223 20.7028 10.8805 20.432L13.8805 19.1977C14.2553 19.0435 14.5 18.6783 14.5 18.273V13.8372C14.5 12.8089 14.8171 11.8056 15.408 10.964L19.8943 4.57465C20.3596 3.912 19.8856 3 19.0759 3Z"
                                                    fill="black" />
                                            </svg>
                                        </span>
                                        <!--end::Svg Icon-->Filter</button>
                                    <!--begin::Menu 1-->
                                    <div class="menu menu-sub menu-sub-dropdown w-300px w-md-325px" data-kt-menu="true">
                                        <!--begin::Header-->
                                        <div class="px-7 py-5">
                                            <div class="fs-5 text-dark fw-bolder">Filter Options</div>
                                        </div>
                                        <!--end::Header-->
                                        <!--begin::Separator-->
                                        <div class="separator border-gray-200"></div>
                                        <!--end::Separator-->
                                        <!--begin::Content-->
                                        <div class="px-7 py-5" data-kt-user-table-filter="form">
                                            <!--begin::Input group-->
                                            <div class="mb-10">
                                                <label class="form-label fs-6 fw-bold">Role:</label>
                                                <select class="form-select form-select-solid fw-bolder"
                                                    data-kt-select2="true" data-placeholder="Select option"
                                                    data-allow-clear="true" data-kt-user-table-filter="role"
                                                    data-hide-search="true">
                                                    <option></option>
                                                    <option value="Administrator">Administrator</option>
                                                    <option value="Analyst">Analyst</option>
                                                    <option value="Developer">Developer</option>
                                                    <option value="Support">Support</option>
                                                    <option value="Trial">Trial</option>
                                                </select>
                                            </div>
                                            <!--end::Input group-->
                                            <!--begin::Input group-->
                                            <div class="mb-10">
                                                <label class="form-label fs-6 fw-bold">Two Step Verification:</label>
                                                <select class="form-select form-select-solid fw-bolder"
                                                    data-kt-select2="true" data-placeholder="Select option"
                                                    data-allow-clear="true" data-kt-user-table-filter="two-step"
                                                    data-hide-search="true">
                                                    <option></option>
                                                    <option value="Enabled">Enabled</option>
                                                </select>
                                            </div>
                                            <!--end::Input group-->
                                            <!--begin::Actions-->
                                            <div class="d-flex justify-content-end">
                                                <button type="reset"
                                                    class="btn btn-light btn-active-light-primary fw-bold me-2 px-6"
                                                    data-kt-menu-dismiss="true"
                                                    data-kt-user-table-filter="reset">Reset</button>
                                                <button type="submit" class="btn btn-primary fw-bold px-6"
                                                    data-kt-menu-dismiss="true"
                                                    data-kt-user-table-filter="filter">Apply</button>
                                            </div>
                                            <!--end::Actions-->
                                        </div>
                                        <!--end::Content-->
                                    </div>
                                    <!--end::Menu 1-->
                                    <!--end::Filter-->

                                    <!--begin::Export-->
                                    <button type="button" class="btn btn-light-primary me-3" data-bs-toggle="modal"
                                        data-bs-target="#kt_modal_export_users">
                                        <!--begin::Svg Icon | path: icons/duotune/arrows/arr078.svg-->
                                        <span class="svg-icon svg-icon-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                                viewBox="0 0 24 24" fill="none">
                                                <rect opacity="0.3" x="12.75" y="4.25" width="12" height="2" rx="1"
                                                    transform="rotate(90 12.75 4.25)" fill="black" />
                                                <path
                                                    d="M12.0573 6.11875L13.5203 7.87435C13.9121 8.34457 14.6232 8.37683 15.056 7.94401C15.4457 7.5543 15.4641 6.92836 15.0979 6.51643L12.4974 3.59084C12.0996 3.14332 11.4004 3.14332 11.0026 3.59084L8.40206 6.51643C8.0359 6.92836 8.0543 7.5543 8.44401 7.94401C8.87683 8.37683 9.58785 8.34458 9.9797 7.87435L11.4427 6.11875C11.6026 5.92684 11.8974 5.92684 12.0573 6.11875Z"
                                                    fill="black" />
                                                <path
                                                    d="M18.75 8.25H17.75C17.1977 8.25 16.75 8.69772 16.75 9.25C16.75 9.80228 17.1977 10.25 17.75 10.25C18.3023 10.25 18.75 10.6977 18.75 11.25V18.25C18.75 18.8023 18.3023 19.25 17.75 19.25H5.75C5.19772 19.25 4.75 18.8023 4.75 18.25V11.25C4.75 10.6977 5.19771 10.25 5.75 10.25C6.30229 10.25 6.75 9.80228 6.75 9.25C6.75 8.69772 6.30229 8.25 5.75 8.25H4.75C3.64543 8.25 2.75 9.14543 2.75 10.25V19.25C2.75 20.3546 3.64543 21.25 4.75 21.25H18.75C19.8546 21.25 20.75 20.3546 20.75 19.25V10.25C20.75 9.14543 19.8546 8.25 18.75 8.25Z"
                                                    fill="#C4C4C4" />
                                            </svg>
                                        </span>
                                        <!--end::Svg Icon-->Export</button>
                                    <!--end::Export-->
                                    #%>
                                    <!-- <button type="button" class="btn btn-light-info me-3" data-bs-toggle="modal" data-bs-target="#kt_modal_import_company">
                                <span class="svg-icon svg-icon-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                        <rect opacity="0.3" width="12" height="2" rx="1" transform="matrix(0 -1 -1 0 12.75 19.75)" fill="black"/>
                                        <path d="M12.0573 17.8813L13.5203 16.1256C13.9121 15.6554 14.6232 15.6232 15.056 16.056C15.4457 16.4457 15.4641 17.0716 15.0979 17.4836L12.4974 20.4092C12.0996 20.8567 11.4004 20.8567 11.0026 20.4092L8.40206 17.4836C8.0359 17.0716 8.0543 16.4457 8.44401 16.056C8.87683 15.6232 9.58785 15.6554 9.9797 16.1256L11.4427 17.8813C11.6026 18.0732 11.8974 18.0732 12.0573 17.8813Z" fill="black"/>
                                        <path d="M18.75 15.75H17.75C17.1977 15.75 16.75 15.3023 16.75 14.75C16.75 14.1977 17.1977 13.75 17.75 13.75C18.3023 13.75 18.75 13.3023 18.75 12.75V5.75C18.75 5.19771 18.3023 4.75 17.75 4.75L5.75 4.75C5.19772 4.75 4.75 5.19771 4.75 5.75V12.75C4.75 13.3023 5.19771 13.75 5.75 13.75C6.30229 13.75 6.75 14.1977 6.75 14.75C6.75 15.3023 6.30229 15.75 5.75 15.75H4.75C3.64543 15.75 2.75 14.8546 2.75 13.75V4.75C2.75 3.64543 3.64543 2.75 4.75 2.75L18.75 2.75C19.8546 2.75 20.75 3.64543 20.75 4.75V13.75C20.75 14.8546 19.8546 15.75 18.75 15.75Z" fill="#C4C4C4"/>
                                    </svg>
                                </span>
                                <span class="button-label">Company Bulk Upload</span>
                            </button> -->
                                    <!--begin::Add user-->
                                    <a href="/add-company" class="btn btn-primary">
                                        <!--begin::Svg Icon | path: icons/duotune/arrows/arr075.svg-->
                                        <span class="svg-icon svg-icon-2">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                                viewBox="0 0 24 24" fill="none">
                                                <rect opacity="0.5" x="11.364" y="20.364" width="16" height="2" rx="1"
                                                    transform="rotate(-90 11.364 20.364)" fill="black" />
                                                <rect x="4.36396" y="11.364" width="16" height="2" rx="1"
                                                    fill="black" />
                                            </svg>
                                        </span>
                                        <!--end::Svg Icon-->Add Company</a>
                                    <!--end::Add user-->
                            </div>
                            <!--end::Toolbar-->
                            <!--begin::Group actions-->
                            <div class="d-flex justify-content-end align-items-center d-none"
                                data-kt-user-table-toolbar="selected">
                                <div class="fw-bolder me-5">
                                    <span class="me-2" data-kt-user-table-select="selected_count"></span>Selected
                                </div>
                                <button type="button" class="btn btn-danger"
                                    data-kt-user-table-select="delete_selected">Delete Selected</button>
                            </div>
                            <!--end::Group actions-->
                            <!--begin::Modal - Adjust Balance-->
                            <div class="modal fade" id="kt_modal_import_company" tabindex="-1" aria-hidden="true">
                                <!--begin::Modal dialog-->
                                <div class="modal-dialog modal-dialog-centered mw-650px">
                                    <!--begin::Modal content-->
                                    <div class="modal-content">
                                        <!--begin::Modal header-->
                                        <div class="modal-header">
                                            <!--begin::Modal title-->
                                            <h2 class="fw-bolder">Import Companies</h2>
                                            <!--end::Modal title-->
                                            <!--begin::Close-->
                                            <div class="btn btn-icon btn-sm btn-active-icon-primary"
                                                data-kt-users-modal-action="close">
                                                <!--begin::Svg Icon | path: icons/duotune/arrows/arr061.svg-->
                                                <span class="svg-icon svg-icon-1">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                                        viewBox="0 0 24 24" fill="none">
                                                        <rect opacity="0.5" x="6" y="17.3137" width="16" height="2"
                                                            rx="1" transform="rotate(-45 6 17.3137)" fill="black" />
                                                        <rect x="7.41422" y="6" width="16" height="2" rx="1"
                                                            transform="rotate(45 7.41422 6)" fill="black" />
                                                    </svg>
                                                </span>
                                                <!--end::Svg Icon-->
                                            </div>
                                            <!--end::Close-->
                                        </div>
                                        <!--end::Modal header-->
                                        <!--begin::Modal body-->
                                        <div class="modal-body scroll-y mx-5 mx-xl-15 my-7">
                                            <!--begin::Form-->
                                            <form id="kt_modal_import_company_form" class="form" action="#"
                                                method="POST" enctype="multipart/form-data">
                                                <!--begin::Input group-->
                                                <div class="fv-row mb-10">
                                                    <!--begin::Label-->
                                                    <label class="fs-6 fw-bold form-label mb-2">Select File:</label>
                                                    <!--end::Label-->
                                                    <!--begin::Input-->
                                                    <input type="file" name="company_file" class="" accept=".csv">
                                                    <!--end::Input-->
                                                </div>
                                                <!--end::Input group-->
                                                <!--begin::Actions-->
                                                <div class="text-center">
                                                    <button type="reset" class="btn btn-light me-3"
                                                        data-kt-users-modal-action="cancel">Discard</button>
                                                    <button type="submit" class="btn btn-primary"
                                                        data-kt-users-modal-action="submit">
                                                        <span class="indicator-label">Submit</span>
                                                        <span class="indicator-progress">Please wait...
                                                            <span
                                                                class="spinner-border spinner-border-sm align-middle ms-2"></span></span>
                                                    </button>
                                                </div>
                                                <!--end::Actions-->
                                            </form>
                                            <!--end::Form-->
                                        </div>
                                        <!--end::Modal body-->
                                    </div>
                                    <!--end::Modal content-->
                                </div>
                                <!--end::Modal dialog-->
                            </div>
                            <!--end::Modal - New Card-->
                        </div>
                        <!--end::Card toolbar-->
                    </div>
                    <!--end::Card header-->
                    <!--begin::Card body-->
                    <div class="card-body pt-0">
                        <!--begin::Table-->
                        <table class="table align-middle table-row-dashed fs-6 gy-5" id="kt_table_users">
                            <!--begin::Table head-->
                            <thead>
                                <tr class="text-start text-muted fw-bolder fs-7 text-uppercase gs-0">
                                    <th class="text-center min-w-100px">Actions</th>
                                    <th class="w-10px pe-2">
                                        <div class="form-check form-check-sm form-check-custom form-check-solid me-3">
                                            <input class="form-check-input" type="checkbox" data-kt-check="true"
                                                data-kt-check-target="#kt_table_users .form-check-input" value="1" />
                                        </div>
                                    </th>
                                    <th class="min-w-125px">Organization</th>
                                    <th class="min-w-125px">Phone</th>
                                    <th class="min-w-125px">Category</th>
                                    <th class="min-w-125px">Status</th>
                                    <th class="min-w-125px">Created Date</th>
                                </tr>
                            </thead>
                            <!--end::Table head-->
                            <!--begin::Table body-->
                            <tbody class="text-gray-600 fw-bold">
                                <% allcompany.forEach( company=> { %>
                                    <tr>
                                        <!--begin::Action=-->
                                        <td class="text-end">
                                            <% if(currentUserData.user_type_id !=3 ) { %>
                                                <a href="#" class="btn btn-light btn-active-light-primary btn-sm"
                                                    data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end"
                                                    data-kt-menu-flip="top-end">Actions
                                                    <!--begin::Svg Icon | path: icons/duotune/arrows/arr072.svg-->
                                                    <span class="svg-icon svg-icon-5 m-0">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                                            viewBox="0 0 24 24" fill="none">
                                                            <path
                                                                d="M11.4343 12.7344L7.25 8.55005C6.83579 8.13583 6.16421 8.13584 5.75 8.55005C5.33579 8.96426 5.33579 9.63583 5.75 10.05L11.2929 15.5929C11.6834 15.9835 12.3166 15.9835 12.7071 15.5929L18.25 10.05C18.6642 9.63584 18.6642 8.96426 18.25 8.55005C17.8358 8.13584 17.1642 8.13584 16.75 8.55005L12.5657 12.7344C12.2533 13.0468 11.7467 13.0468 11.4343 12.7344Z"
                                                                fill="black" />
                                                        </svg>
                                                    </span>
                                                    <!--end::Svg Icon--></a>
                                                <!--begin::Menu-->
                                                <div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4"
                                                    data-kt-menu="true">
                                                    <!--begin::Menu item-->
                                                    <div class="menu-item px-3">
                                                        <a href="/edit-company/<%= company.ID %>"
                                                            class="menu-link px-3">Edit</a>
                                                    </div>
                                                    <div class="menu-item px-3">
                                                        <a href="#" class="menu-link px-3"
                                                            data-companyid="<%= company.ID %>"
                                                            data-kt-users-table-filter="restore_row">Restore</a>
                                                    </div>
                                                    <div class="menu-item px-3">
                                                        <a href="#" class="menu-link px-3"
                                                            data-companyid="<%= company.ID %>"
                                                            data-kt-users-table-filter="delete_row">Delete</a>
                                                    </div>
                                                </div>
                                                <!--end::Menu-->
                                                <% } else { %>
                                                    <a href="/edit-company/<%= company.ID %>"
                                                        class="btn btn-light btn-active-light-primary btn-m"
                                                        data-kt-menu-placement="bottom-end" data-kt-menu-trigger="click"
                                                        data-kt-menu-flip="top-end"> Edit

                                                    </a>
                                                    <% } %>
                                        </td>
                                        <!--end::Action=-->
                                        <td>
                                            <div class="form-check form-check-sm form-check-custom form-check-solid">
                                                <input class="form-check-input" type="checkbox"
                                                    data-id="<%= company.ID %>" value="1" />
                                            </div>

                                        </td>
                                        <td class="d-flex align-items-center">
                                            <!--begin:: Avatar -->
                                            <div class="symbol symbol-circle symbol-50px overflow-hidden me-3">
                                                <a href="/company/<%= company.ID %>">
                                                    <div class="symbol-label">
                                                        <% if(company.logo){ %>
                                                            <img src="<%= company.logo %>"
                                                                alt="<%= company.company_name %>" class="w-100" />
                                                            <% } else { %>
                                                                <img src="/front-end/images/company-placeholder-image.png"
                                                                    alt="<%= company.company_name %>" class="w-100" />
                                                                <% } %>
                                                    </div>
                                                </a>
                                            </div>
                                            <!--end::Avatar-->
                                            <!--begin::User details-->
                                            <div class="d-flex flex-column">
                                                <div class="d-flex align-items-center mb-2">
                                                    <a href="/edit-company/<%= company.ID %>"
                                                        class="text-gray-800 text-hover-primary mb-1">
                                                        <%= company.company_name %>
                                                    </a>
                                                    <a>
                                                        <% if(company.verified==1){ %>
                                                            <span class="svg-icon svg-icon-1 svg-icon-success">
                                                                <svg xmlns="http://www.w3.org/2000/svg" width="24px"
                                                                    height="24px" viewBox="0 0 24 24">
                                                                    <path
                                                                        d="M10.0813 3.7242C10.8849 2.16438 13.1151 2.16438 13.9187 3.7242V3.7242C14.4016 4.66147 15.4909 5.1127 16.4951 4.79139V4.79139C18.1663 4.25668 19.7433 5.83365 19.2086 7.50485V7.50485C18.8873 8.50905 19.3385 9.59842 20.2758 10.0813V10.0813C21.8356 10.8849 21.8356 13.1151 20.2758 13.9187V13.9187C19.3385 14.4016 18.8873 15.491 19.2086 16.4951V16.4951C19.7433 18.1663 18.1663 19.7433 16.4951 19.2086V19.2086C15.491 18.8873 14.4016 19.3385 13.9187 20.2758V20.2758C13.1151 21.8356 10.8849 21.8356 10.0813 20.2758V20.2758C9.59842 19.3385 8.50905 18.8873 7.50485 19.2086V19.2086C5.83365 19.7433 4.25668 18.1663 4.79139 16.4951V16.4951C5.1127 15.491 4.66147 14.4016 3.7242 13.9187V13.9187C2.16438 13.1151 2.16438 10.8849 3.7242 10.0813V10.0813C4.66147 9.59842 5.1127 8.50905 4.79139 7.50485V7.50485C4.25668 5.83365 5.83365 4.25668 7.50485 4.79139V4.79139C8.50905 5.1127 9.59842 4.66147 10.0813 3.7242V3.7242Z"
                                                                        fill="#00A3FF"></path>
                                                                    <path class="permanent"
                                                                        d="M14.8563 9.1903C15.0606 8.94984 15.3771 8.9385 15.6175 9.14289C15.858 9.34728 15.8229 9.66433 15.6185 9.9048L11.863 14.6558C11.6554 14.9001 11.2876 14.9258 11.048 14.7128L8.47656 12.4271C8.24068 12.2174 8.21944 11.8563 8.42911 11.6204C8.63877 11.3845 8.99996 11.3633 9.23583 11.5729L11.3706 13.4705L14.8563 9.1903Z"
                                                                        fill="white"></path>
                                                                </svg>
                                                            </span>
                                                            <% } %>
                                                    </a>
                                                </div>

                                                <span>
                                                    <%= company.comp_email %>
                                                </span>
                                            </div>
                                        </td>
                                        <td>
                                            <a href="tel:<%= company.comp_phone %>">
                                                <%= company.comp_phone %>
                                            </a>
                                        </td>
                                        <!--end::Role=-->
                                        <!--begin::Last login=-->
                                        <td>
                                            <%= company.categories %>
                                        </td>
                                        <!--end::Last login=-->
                                        <!--begin::Two step=-->
                                        <td>
                                            <% if(company.status==2){ %>
                                                <span
                                                    class="badge badge-light-warning fw-bolder px-4 py-3">Pending</span>
                                                <% }else if(company.status==1){ %>
                                                    <span
                                                        class="badge badge-light-success fw-bolder px-4 py-3">Approved</span>
                                                    <% }else if(company.status==0){%>
                                                        <span
                                                            class="badge badge-light-danger fw-bolder px-4 py-3">Rejected</span>
                                                        <% } else { %>
                                                            <span
                                                                class="badge badge-dark fw-bolder px-4 py-3">Trashed</span>
                                                            <% } %>
                                        </td>
                                        <!--end::Two step=-->
                                        <!--begin::Joined-->
                                        <% const dateString=company.created_date; %>
                                            <% const date=new Date(dateString); %>
                                                <td>
                                                    <%= date.toLocaleDateString('en-US', { day: 'numeric' ,
                                                        month: 'long' , year: 'numeric' }) %>,
                                                        <%= date.toLocaleTimeString('en-US', { hour: 'numeric' ,
                                                            minute: 'numeric' , hour12: true }) %>
                                                </td>
                                                <!--begin::Joined-->

                                    </tr>
                                    <!--end::Table row-->
                                    <% }) %>
                            </tbody>
                            <!--end::Table body-->
                        </table>
                        <!--end::Table-->
                    </div>
                    <!--end::Card body-->
                </div>
                <!--end::Card-->
            </div>
            <!--end::Container-->
        </div>
        <!--end::Post-->
    </div>
    <!--end::Content-->
    <%- include('common/footer') -%>
        <script src="/assets/plugins/custom/datatables/datatables.bundle.js"></script>
        <script>
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
                var __webpack_exports__ = {};
                /*!**************************************************************************************************!*\
                  !*** ../../../themes/metronic/html/demo1/src/js/custom/apps/user-management/users/list/table.js ***!
                  \**************************************************************************************************/


                var KTUsersList = function () {
                    // Define shared variables
                    var table = document.getElementById('kt_table_users');
                    var datatable;
                    var toolbarBase;
                    var toolbarSelected;
                    var selectedCount;

                    // Private functions
                    var initUserTable = function () {
                        // Set date data order
                        const tableRows = table.querySelectorAll('tbody tr');

                        tableRows.forEach(row => {
                            const dateRow = row.querySelectorAll('td');
                            const lastLogin = dateRow[3].innerText.toLowerCase(); // Get last login time
                            let timeCount = 0;
                            let timeFormat = 'minutes';

                            // Determine date & time format -- add more formats when necessary
                            if (lastLogin.includes('yesterday')) {
                                timeCount = 1;
                                timeFormat = 'days';
                            } else if (lastLogin.includes('mins')) {
                                timeCount = parseInt(lastLogin.replace(/\D/g, ''));
                                timeFormat = 'minutes';
                            } else if (lastLogin.includes('hours')) {
                                timeCount = parseInt(lastLogin.replace(/\D/g, ''));
                                timeFormat = 'hours';
                            } else if (lastLogin.includes('days')) {
                                timeCount = parseInt(lastLogin.replace(/\D/g, ''));
                                timeFormat = 'days';
                            } else if (lastLogin.includes('weeks')) {
                                timeCount = parseInt(lastLogin.replace(/\D/g, ''));
                                timeFormat = 'weeks';
                            }

                            // Subtract date/time from today -- more info on moment datetime subtraction: https://momentjs.com/docs/#/durations/subtract/
                            const realDate = moment().subtract(timeCount, timeFormat).format();

                            // Insert real date to last login attribute
                            dateRow[3].setAttribute('data-order', realDate);

                            // Set real date for joined column
                            const joinedDate = moment(dateRow[5].innerHTML, "DD MMM YYYY, LT").format(); // select date from 5th column in table
                            dateRow[5].setAttribute('data-order', joinedDate);
                        });

                        // Init datatable --- more info on datatables: https://datatables.net/manual/
                        datatable = $(table).DataTable({
                            "info": true,
                            'order': [],
                            "pageLength": 10,
                            "lengthChange": true,
                            'columnDefs': [
                                { orderable: false, targets: 0 }, // Disable ordering on column 0 (checkbox)
                                { orderable: false, targets: 1 }, // Disable ordering on column 6 (actions)                
                            ]
                        });

                        // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw
                        datatable.on('draw', function () {
                            initToggleToolbar();
                            handleDeleteRows();
                            toggleToolbars();
                        });
                    }

                    // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
                    var handleSearchDatatable = () => {
                        const filterSearch = document.querySelector('[data-kt-user-table-filter="search"]');
                        filterSearch.addEventListener('keyup', function (e) {
                            datatable.search(e.target.value).draw();
                        });
                    }

                    // Filter Datatable
                    var handleFilterDatatable = () => {
                        // Select filter options
                        const filterForm = document.querySelector('[data-kt-user-table-filter="form"]');
                        if (filterForm) {
                            const filterButton = filterForm.querySelector('[data-kt-user-table-filter="filter"]');
                            const selectOptions = filterForm.querySelectorAll('select');

                            // Filter datatable on submit
                            filterButton.addEventListener('click', function () {
                                var filterString = '';

                                // Get filter values
                                selectOptions.forEach((item, index) => {
                                    if (item.value && item.value !== '') {
                                        if (index !== 0) {
                                            filterString += ' ';
                                        }

                                        // Build filter value options
                                        filterString += item.value;
                                    }
                                });

                                // Filter datatable --- official docs reference: https://datatables.net/reference/api/search()
                                datatable.search(filterString).draw();
                            });
                        }

                    }

                    // Reset Filter
                    var handleResetForm = () => {
                        // Select reset button
                        const resetButton = document.querySelector('[data-kt-user-table-filter="reset"]');

                        // Reset datatable
                        if (resetButton) {
                            resetButton.addEventListener('click', function () {
                                // Select filter options
                                const filterForm = document.querySelector('[data-kt-user-table-filter="form"]');
                                const selectOptions = filterForm.querySelectorAll('select');

                                // Reset select2 values -- more info: https://select2.org/programmatic-control/add-select-clear-items
                                selectOptions.forEach(select => {
                                    $(select).val('').trigger('change');
                                });

                                // Reset datatable --- official docs reference: https://datatables.net/reference/api/search()
                                datatable.search('').draw();
                            });
                        }

                    }


                    // Delete subscirption
                    var handleDeleteRows = () => {
                        // Select all delete buttons
                        const deleteButtons = table.querySelectorAll('[data-kt-users-table-filter="delete_row"]');

                        deleteButtons.forEach(d => {
                            // Delete button on click
                            d.addEventListener('click', function (e) {
                                e.preventDefault();
                                //alert('aaaaaaaaa');
                                var companyid = $(this).attr("data-companyid");
                                console.log(companyid);
                                // Select parent row
                                const parent = e.target.closest('tr');

                                // Get user name
                                //const userName = parent.querySelectorAll('td')[2].querySelectorAll('a')[2].innerText;

                                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/
                                Swal.fire({
                                    text: "Are you sure you want to permanently delete?",
                                    icon: "warning",
                                    showCancelButton: true,
                                    buttonsStyling: false,
                                    confirmButtonText: "Yes, delete!",
                                    cancelButtonText: "No, cancel",
                                    customClass: {
                                        confirmButton: "btn fw-bold btn-danger",
                                        cancelButton: "btn fw-bold btn-active-light-primary"
                                    }
                                }).then(function (result) {
                                    if (result.value) {
                                        $.ajax({
                                            url: 'http://localhost:2000/auth/deleteCompanies',
                                            method: 'POST',
                                            data: JSON.stringify({ companyid: companyid }), 
                                            contentType: 'application/json', 
                                            success: function (data) {
                                                console.log("Server response:", data); 
                                                if (data.success) {
                                                    Swal.fire({
                                                        text: data.message,
                                                        icon: "success",
                                                        buttonsStyling: false,
                                                        confirmButtonText: "Ok, got it!",
                                                        customClass: {
                                                            confirmButton: "btn btn-primary"
                                                        }
                                                    }).then(function (result) {
                                                        if (result.isConfirmed) {
                                                            location.reload();
                                                        }
                                                    });
                                                } else {
                                                    Swal.fire({
                                                        text: data.message,
                                                        icon: "error",
                                                        buttonsStyling: false,
                                                        confirmButtonText: "Ok, got it!",
                                                        customClass: {
                                                            confirmButton: "btn btn-primary"
                                                        }
                                                    });
                                                }
                                            },
                                            error: function (xhr, status, error) {
                                                console.error("AJAX error:", error); 
                                                Swal.fire({
                                                    text: "An error occurred while deleting the company.",
                                                    icon: "error",
                                                    buttonsStyling: false,
                                                    confirmButtonText: "Ok, got it!",
                                                    customClass: {
                                                        confirmButton: "btn btn-primary"
                                                    }
                                                });
                                            }
                                        });
                                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                                        Swal.fire({
                                            text: "Company is not deleted.",
                                            icon: "error",
                                            buttonsStyling: false,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn fw-bold btn-primary",
                                            }
                                        });
                                    }
                                });
                            })
                        });

                        // Select all delete buttons
                        const restoreButtons = table.querySelectorAll('[data-kt-users-table-filter="restore_row"]');

                        restoreButtons.forEach(d => {
                            // Delete button on click
                            d.addEventListener('click', function (e) {
                                e.preventDefault();
                                //alert('aaaaaaaaa');
                                var companyid = $(this).attr("data-companyid");
                                console.log(companyid);
                                // Select parent row
                                const parent = e.target.closest('tr');

                                // Get user name
                                //const userName = parent.querySelectorAll('td')[2].querySelectorAll('a')[2].innerText;

                                // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/
                                Swal.fire({
                                    text: "Are you sure you want to restore ?",
                                    icon: "warning",
                                    showCancelButton: true,
                                    buttonsStyling: false,
                                    confirmButtonText: "Yes, restore!",
                                    cancelButtonText: "No, cancel",
                                    customClass: {
                                        confirmButton: "btn fw-bold btn-danger",
                                        cancelButton: "btn fw-bold btn-active-light-primary"
                                    }
                                }).then(function (result) {
                                    if (result.value) {
                                        $.ajax({
                                            url: '/auth/restore-company',
                                            method: 'POST',
                                            data: { companyid: companyid },
                                            ContentType: 'application/json',
                                            success: function (data) {
                                                if (data.status == 'ok') {
                                                    Swal.fire({
                                                        text: data.message,
                                                        icon: "success",
                                                        buttonsStyling: false,
                                                        confirmButtonText: "Ok, got it!",
                                                        customClass: {
                                                            confirmButton: "btn btn-primary"
                                                        }
                                                    }).then(function (result) {
                                                        if (result.isConfirmed) {
                                                            location.reload();
                                                        }
                                                    });
                                                } else {
                                                    Swal.fire({
                                                        text: data.message,
                                                        icon: "error",
                                                        buttonsStyling: false,
                                                        confirmButtonText: "Ok, got it!",
                                                        customClass: {
                                                            confirmButton: "btn btn-primary"
                                                        }
                                                    });
                                                }
                                            },
                                            error: function (xhr, status, error) {
                                                // Handle any errors that occur during the request
                                                console.log(error);
                                            }
                                        });
                                    } else if (result.dismiss === 'cancel') {
                                        Swal.fire({
                                            text: "Company is not restored.",
                                            icon: "error",
                                            buttonsStyling: false,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn fw-bold btn-primary",
                                            }
                                        });
                                    }
                                });
                            })
                        });
                    }

                    // Init toggle toolbar
                    // var initToggleToolbar = () => {
                    //     // Toggle selected action toolbar
                    //     // Select all checkboxes
                    //     const checkboxes = table.querySelectorAll('[type="checkbox"]');

                    //     // Select elements
                    //     toolbarBase = document.querySelector('[data-kt-user-table-toolbar="base"]');
                    //     toolbarSelected = document.querySelector('[data-kt-user-table-toolbar="selected"]');
                    //     selectedCount = document.querySelector('[data-kt-user-table-select="selected_count"]');
                    //     const deleteSelected = document.querySelector('[data-kt-user-table-select="delete_selected"]');

                    //     // Toggle delete selected toolbar
                    //     checkboxes.forEach(c => {
                    //         // Checkbox on click event
                    //         c.addEventListener('click', function () {
                    //             setTimeout(function () {
                    //                 toggleToolbars();
                    //             }, 50);
                    //         });
                    //     });

                    //     // Deleted selected rows
                    //     deleteSelected.addEventListener('click', function () {
                    //         // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/
                    //         Swal.fire({
                    //             text: "Are you sure you want to delete selected customers?",
                    //             icon: "warning",
                    //             showCancelButton: true,
                    //             buttonsStyling: false,
                    //             confirmButtonText: "Yes, delete!",
                    //             cancelButtonText: "No, cancel",
                    //             customClass: {
                    //                 confirmButton: "btn fw-bold btn-danger",
                    //                 cancelButton: "btn fw-bold btn-active-light-primary"
                    //             }
                    //         }).then(function (result) {
                    //             if (result.value) {
                    //                 Swal.fire({
                    //                     text: "You have deleted all selected customers!.",
                    //                     icon: "success",
                    //                     buttonsStyling: false,
                    //                     confirmButtonText: "Ok, got it!",
                    //                     customClass: {
                    //                         confirmButton: "btn fw-bold btn-primary",
                    //                     }
                    //                 }).then(function () {
                    //                     // Remove all selected customers
                    //                     checkboxes.forEach(c => {
                    //                         if (c.checked) {
                    //                             datatable.row($(c.closest('tbody tr'))).remove().draw();
                    //                         }
                    //                     });

                    //                     // Remove header checked box
                    //                     const headerCheckbox = table.querySelectorAll('[type="checkbox"]')[0];
                    //                     headerCheckbox.checked = false;
                    //                 }).then(function () {
                    //                     toggleToolbars(); // Detect checked checkboxes
                    //                     initToggleToolbar(); // Re-init toolbar to recalculate checkboxes
                    //                 });
                    //             } else if (result.dismiss === 'cancel') {
                    //                 Swal.fire({
                    //                     text: "Selected customers was not deleted.",
                    //                     icon: "error",
                    //                     buttonsStyling: false,
                    //                     confirmButtonText: "Ok, got it!",
                    //                     customClass: {
                    //                         confirmButton: "btn fw-bold btn-primary",
                    //                     }
                    //                 });
                    //             }
                    //         });
                    //     });
                    // }


                    var initToggleToolbar = () => {
                        // Toggle selected action toolbar
                        // Select all checkboxes
                        const checkboxes = table.querySelectorAll('[type="checkbox"]');
                        console.log("checkboxes", checkboxes);

                        // Select elements
                        toolbarBase = document.querySelector('[data-kt-user-table-toolbar="base"]');
                        toolbarSelected = document.querySelector('[data-kt-user-table-toolbar="selected"]');
                        selectedCount = document.querySelector('[data-kt-user-table-select="selected_count"]');
                        const deleteSelected = document.querySelector('[data-kt-user-table-select="delete_selected"]');
                        console.log("deleteSelected", deleteSelected);

                        // Toggle delete selected toolbar
                        checkboxes.forEach(c => {
                            // Checkbox on click event
                            c.addEventListener('click', function () {
                                setTimeout(function () {
                                    toggleToolbars();
                                }, 50);
                            });
                        });

                        // Deleted selected rows
                        // deleteSelected.addEventListener('click', function () {
                        //     // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/
                        //     Swal.fire({
                        //         text: "Are you sure you want to delete selected customers?",
                        //         icon: "warning",
                        //         showCancelButton: true,
                        //         buttonsStyling: false,
                        //         confirmButtonText: "Yes, delete!",
                        //         cancelButtonText: "No, cancel",
                        //         customClass: {
                        //             confirmButton: "btn fw-bold btn-danger",
                        //             cancelButton: "btn fw-bold btn-active-light-primary"
                        //         }
                        //     }).then(function (result) {
                        //         if (result.value) {
                        //             Swal.fire({
                        //                 text: "You have deleted all selected customers!.",
                        //                 icon: "success",
                        //                 buttonsStyling: false,
                        //                 confirmButtonText: "Ok, got it!",
                        //                 customClass: {
                        //                     confirmButton: "btn fw-bold btn-primary",
                        //                 }
                        //             }).then(function () {
                        //                 // Remove all selected customers
                        //                 checkboxes.forEach(c => {
                        //                     if (c.checked) {
                        //                         datatable.row($(c.closest('tbody tr'))).remove().draw();
                        //                     }
                        //                 });

                        //                 // Remove header checked box
                        //                 const headerCheckbox = table.querySelectorAll('[type="checkbox"]')[0];
                        //                 headerCheckbox.checked = false;
                        //             }).then(function () {
                        //                 toggleToolbars(); // Detect checked checkboxes
                        //                 initToggleToolbar(); // Re-init toolbar to recalculate checkboxes
                        //             });
                        //         } else if (result.dismiss === 'cancel') {
                        //             Swal.fire({
                        //                 text: "Selected customers was not deleted.",
                        //                 icon: "error",
                        //                 buttonsStyling: false,
                        //                 confirmButtonText: "Ok, got it!",
                        //                 customClass: {
                        //                     confirmButton: "btn fw-bold btn-primary",
                        //                 }
                        //             });
                        //         }
                        //     });
                        // });


                        deleteSelected.addEventListener('click', function () {
                            const selectedIds = [];
                            const checkboxes = document.querySelectorAll('#kt_table_users tbody input[type="checkbox"]');
                            checkboxes.forEach(checkbox => {
                                if (checkbox.checked) {
                                    const id = checkbox.getAttribute('data-id');
                                    console.log('Checkbox ID:', id); // Log the ID for debugging
                                    if (id) {
                                        selectedIds.push(id);
                                    }
                                }
                            });
                            console.log('Selected IDs:', selectedIds);


                            // deleteSelected.addEventListener('click', function () {
                            // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/
                            Swal.fire({
                                text: "Are you sure you want to delete selected companies?",
                                icon: "warning",
                                showCancelButton: true,
                                buttonsStyling: false,
                                confirmButtonText: "Yes, delete!",
                                cancelButtonText: "No, cancel",
                                customClass: {
                                    confirmButton: "btn fw-bold btn-danger",
                                    cancelButton: "btn fw-bold btn-active-light-primary"
                                }
                            }).then(function (result) {
                                if (result.value) {
                                    $.ajax({
                                        url: '/auth/delete-company',
                                        method: 'POST',
                                        contentType: 'application/json',
                                        data: JSON.stringify({ companyid: selectedIds }),
                                        success: function (response) {
                                            console.log("response", response);
                                            if (response.success) {
                                                Swal.fire({
                                                    text: "You have deleted all selected customers!.",
                                                    icon: "success",
                                                    buttonsStyling: false,
                                                    confirmButtonText: "Ok, got it!",
                                                    customClass: {
                                                        confirmButton: "btn fw-bold btn-primary",
                                                    }
                                                }).then(function () {
                                                    // Remove all selected customers
                                                    checkboxes.forEach(c => {
                                                        if (c.checked) {
                                                            datatable.row($(c.closest('tbody tr'))).remove().draw();
                                                        }
                                                    });

                                                    // Remove header checked box
                                                    const headerCheckbox = table.querySelectorAll('[type="checkbox"]')[0];
                                                    headerCheckbox.checked = false;

                                                    toggleToolbars(); // Detect checked checkboxes
                                                    initToggleToolbar(); // Re-init toolbar to recalculate checkboxes

                                                    location.reload();
                                                });
                                            } else {
                                                Swal.fire({
                                                    text: "There was an error deleting the selected customers.",
                                                    icon: "error",
                                                    buttonsStyling: false,
                                                    confirmButtonText: "Ok, got it!",
                                                    customClass: {
                                                        confirmButton: "btn fw-bold btn-primary",
                                                    }
                                                });
                                            }
                                        },
                                        error: function () {
                                            Swal.fire({
                                                text: "There was  deleting the selected customers.",
                                                icon: "error",
                                                buttonsStyling: false,
                                                confirmButtonText: "Ok, got it!",
                                                customClass: {
                                                    confirmButton: "btn fw-bold btn-primary",
                                                }
                                            });
                                        }
                                    });
                                } else if (result.dismiss === 'cancel') {
                                    Swal.fire({
                                        text: "Selected customers were not deleted.",
                                        icon: "error",
                                        buttonsStyling: false,
                                        confirmButtonText: "Ok, got it!",
                                        customClass: {
                                            confirmButton: "btn fw-bold btn-primary",
                                        }
                                    }).then(function () {
                                        console.log("llllll");
                                        location.reload();
                                    });
                                }
                            });
                        });


                    }



                    // Toggle toolbars
                    const toggleToolbars = () => {
                        // Select refreshed checkbox DOM elements 
                        const allCheckboxes = table.querySelectorAll('tbody [type="checkbox"]');

                        // Detect checkboxes state & count
                        let checkedState = false;
                        let count = 0;

                        // Count checked boxes
                        allCheckboxes.forEach(c => {
                            if (c.checked) {
                                checkedState = true;
                                count++;
                            }
                        });

                        // Toggle toolbars
                        if (checkedState) {
                            selectedCount.innerHTML = count;
                            toolbarBase.classList.add('d-none');
                            toolbarSelected.classList.remove('d-none');
                        } else {
                            toolbarBase.classList.remove('d-none');
                            toolbarSelected.classList.add('d-none');
                        }
                    }

                    return {
                        // Public functions  
                        init: function () {
                            if (!table) {
                                return;
                            }

                            initUserTable();
                            initToggleToolbar();
                            handleSearchDatatable();
                            handleResetForm();
                            handleDeleteRows();
                            handleFilterDatatable();

                        }
                    }
                }();

                // On document ready
                KTUtil.onDOMContentLoaded(function () {
                    KTUsersList.init();
                });
                /******/
})()
                ;
            //# sourceMappingURL=table.js.map    
        </script>
        <!--Upload Company-->
        <script>
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
                var __webpack_exports__ = {};
                /*!*********************************************************************************************************!*\
                  !*** ../../../themes/metronic/html/demo1/src/js/custom/apps/user-management/users/list/export-users.js ***!
                  \*********************************************************************************************************/


                // Class definition
                var KTModalExportUsers = function () {
                    // Shared variables
                    const element = document.getElementById('kt_modal_import_company');
                    const form = element.querySelector('#kt_modal_import_company_form');
                    const modal = new bootstrap.Modal(element);

                    // Init form inputs
                    var initForm = function () {

                        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/
                        var validator = FormValidation.formValidation(
                            form,
                            {
                                fields: {
                                    'format': {
                                        validators: {
                                            notEmpty: {
                                                message: 'File format is required'
                                            }
                                        }
                                    },
                                },
                                plugins: {
                                    trigger: new FormValidation.plugins.Trigger(),
                                    bootstrap: new FormValidation.plugins.Bootstrap5({
                                        rowSelector: '.fv-row',
                                        eleInvalidClass: '',
                                        eleValidClass: ''
                                    })
                                }
                            }
                        );

                        // Submit button handler
                        const submitButton = element.querySelector('[data-kt-users-modal-action="submit"]');
                        submitButton.addEventListener('click', function (e) {
                            e.preventDefault();

                            // Validate form before submit
                            if (validator) {
                                validator.validate().then(function (status) {
                                    console.log('validated!');

                                    if (status == 'Valid') {
                                        submitButton.setAttribute('data-kt-indicator', 'on');

                                        // Disable submit button whilst loading
                                        submitButton.disabled = true;
                                        var formElement = document.getElementById('kt_modal_import_company_form');
                                        var formData = new FormData(formElement);

                                        //submitButton.removeAttribute('data-kt-indicator');
                                        $.ajax({
                                            url: '/auth/company-bulk-upload', // URL for your API endpoint
                                            type: 'POST',
                                            data: formData,
                                            processData: false, // Prevent jQuery from processing the data
                                            contentType: false, // Let the browser set the content type
                                            success: function (data) {
                                                if (data.status == 'ok') {
                                                    Swal.fire({
                                                        text: data.message,
                                                        icon: "success",
                                                        buttonsStyling: false,
                                                        confirmButtonText: "Ok, got it!",
                                                        customClass: {
                                                            confirmButton: "btn btn-primary"
                                                        }
                                                    }).then(function (result) {
                                                        if (result.isConfirmed) {
                                                            location.reload();
                                                        }
                                                    });
                                                } else {
                                                    Swal.fire({
                                                        text: data.message,
                                                        icon: "error",
                                                        buttonsStyling: false,
                                                        confirmButtonText: "Ok, got it!",
                                                        customClass: {
                                                            confirmButton: "btn btn-primary"
                                                        }
                                                    });
                                                }
                                            },
                                            error: function (xhr, status, error) {
                                                // Handle any errors that occur during the request
                                                console.log(error);
                                            }
                                        });
                                        //setTimeout(function () {
                                        //}, 5000);
                                    } else {
                                        Swal.fire({
                                            text: "Sorry, looks like there are some errors detected, please try again.",
                                            icon: "error",
                                            buttonsStyling: false,
                                            confirmButtonText: "Ok, got it!",
                                            customClass: {
                                                confirmButton: "btn btn-primary"
                                            }
                                        });
                                    }
                                });
                            }
                        });

                        // Cancel button handler
                        const cancelButton = element.querySelector('[data-kt-users-modal-action="cancel"]');
                        cancelButton.addEventListener('click', function (e) {
                            e.preventDefault();

                            Swal.fire({
                                text: "Are you sure you would like to cancel?",
                                icon: "warning",
                                showCancelButton: true,
                                buttonsStyling: false,
                                confirmButtonText: "Yes, cancel it!",
                                cancelButtonText: "No, return",
                                customClass: {
                                    confirmButton: "btn btn-primary",
                                    cancelButton: "btn btn-active-light"
                                }
                            }).then(function (result) {
                                if (result.value) {
                                    form.reset(); // Reset form	
                                    modal.hide(); // Hide modal				
                                } else if (result.dismiss === 'cancel') {
                                    Swal.fire({
                                        text: "Your form has not been cancelled!.",
                                        icon: "error",
                                        buttonsStyling: false,
                                        confirmButtonText: "Ok, got it!",
                                        customClass: {
                                            confirmButton: "btn btn-primary",
                                        }
                                    });
                                }
                            });
                        });

                        // Close button handler
                        const closeButton = element.querySelector('[data-kt-users-modal-action="close"]');
                        closeButton.addEventListener('click', function (e) {
                            e.preventDefault();

                            Swal.fire({
                                text: "Are you sure you would like to cancel?",
                                icon: "warning",
                                showCancelButton: true,
                                buttonsStyling: false,
                                confirmButtonText: "Yes, cancel it!",
                                cancelButtonText: "No, return",
                                customClass: {
                                    confirmButton: "btn btn-primary",
                                    cancelButton: "btn btn-active-light"
                                }
                            }).then(function (result) {
                                if (result.value) {
                                    form.reset(); // Reset form	
                                    modal.hide(); // Hide modal				
                                } else if (result.dismiss === 'cancel') {
                                    Swal.fire({
                                        text: "Your form has not been cancelled!.",
                                        icon: "error",
                                        buttonsStyling: false,
                                        confirmButtonText: "Ok, got it!",
                                        customClass: {
                                            confirmButton: "btn btn-primary",
                                        }
                                    });
                                }
                            });
                        });
                    }

                    return {
                        // Public functions
                        init: function () {
                            initForm();
                        }
                    };
                }();

                // On document ready
                KTUtil.onDOMContentLoaded(function () {
                    KTModalExportUsers.init();
                });
                /******/
})()
                ;
            //# sourceMappingURL=export-users.js.map
        </script>
        <style>
            .symbol-circle {
                box-shadow: 0px 4px 14px 0px rgba(0, 0, 0, 0.25);
            }
        </style>